
DevelopmentBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030dc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800319c  0800319c  0000419c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d4  080031d4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080031d4  080031d4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031d4  080031d4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d4  080031d4  000041d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031d8  080031d8  000041d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031dc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  080031e8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080031e8  000051d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d385  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002121  00000000  00000000  000123b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000144e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e6  00000000  00000000  00015188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d4f  00000000  00000000  00015b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011804  00000000  00000000  0002f8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098150  00000000  00000000  000410c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c80  00000000  00000000  000d9254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000dbed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003184 	.word	0x08003184

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003184 	.word	0x08003184

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	@ 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f002 ff7b 	bl	800312c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b34      	ldr	r3, [pc, #208]	@ (8000308 <MX_GPIO_Init+0xe8>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b33      	ldr	r3, [pc, #204]	@ (8000308 <MX_GPIO_Init+0xe8>)
 800023c:	2180      	movs	r1, #128	@ 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b30      	ldr	r3, [pc, #192]	@ (8000308 <MX_GPIO_Init+0xe8>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b2d      	ldr	r3, [pc, #180]	@ (8000308 <MX_GPIO_Init+0xe8>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b2c      	ldr	r3, [pc, #176]	@ (8000308 <MX_GPIO_Init+0xe8>)
 8000258:	2180      	movs	r1, #128	@ 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b29      	ldr	r3, [pc, #164]	@ (8000308 <MX_GPIO_Init+0xe8>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	@ 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b26      	ldr	r3, [pc, #152]	@ (8000308 <MX_GPIO_Init+0xe8>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b25      	ldr	r3, [pc, #148]	@ (8000308 <MX_GPIO_Init+0xe8>)
 8000274:	2180      	movs	r1, #128	@ 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b22      	ldr	r3, [pc, #136]	@ (8000308 <MX_GPIO_Init+0xe8>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	@ 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028a:	4b1f      	ldr	r3, [pc, #124]	@ (8000308 <MX_GPIO_Init+0xe8>)
 800028c:	695a      	ldr	r2, [r3, #20]
 800028e:	4b1e      	ldr	r3, [pc, #120]	@ (8000308 <MX_GPIO_Init+0xe8>)
 8000290:	2180      	movs	r1, #128	@ 0x80
 8000292:	02c9      	lsls	r1, r1, #11
 8000294:	430a      	orrs	r2, r1
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <MX_GPIO_Init+0xe8>)
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	2380      	movs	r3, #128	@ 0x80
 800029e:	02db      	lsls	r3, r3, #11
 80002a0:	4013      	ands	r3, r2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002a6:	2390      	movs	r3, #144	@ 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2200      	movs	r2, #0
 80002ac:	2120      	movs	r1, #32
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 ff0e 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	2280      	movs	r2, #128	@ 0x80
 80002b8:	0192      	lsls	r2, r2, #6
 80002ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2284      	movs	r2, #132	@ 0x84
 80002c0:	0392      	lsls	r2, r2, #14
 80002c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	4a0f      	ldr	r2, [pc, #60]	@ (800030c <MX_GPIO_Init+0xec>)
 80002ce:	0019      	movs	r1, r3
 80002d0:	0010      	movs	r0, r2
 80002d2:	f000 fd85 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002d6:	0021      	movs	r1, r4
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2220      	movs	r2, #32
 80002dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2201      	movs	r2, #1
 80002e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002f0:	187a      	adds	r2, r7, r1
 80002f2:	2390      	movs	r3, #144	@ 0x90
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	0011      	movs	r1, r2
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 fd71 	bl	8000de0 <HAL_GPIO_Init>

}
 80002fe:	46c0      	nop			@ (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	b00b      	add	sp, #44	@ 0x2c
 8000304:	bd90      	pop	{r4, r7, pc}
 8000306:	46c0      	nop			@ (mov r8, r8)
 8000308:	40021000 	.word	0x40021000
 800030c:	48000800 	.word	0x48000800

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fc22 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f81a 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f7ff ff80 	bl	8000220 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000320:	f000 f8f2 	bl	8000508 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000324:	f000 f954 	bl	80005d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000328:	f000 f9b0 	bl	800068c <MX_TIM3_Init>
  MX_TSC_Init();
 800032c:	f000 fa6a 	bl	8000804 <MX_TSC_Init>
  MX_USART2_UART_Init();
 8000330:	f000 fb6e 	bl	8000a10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000334:	4b04      	ldr	r3, [pc, #16]	@ (8000348 <main+0x38>)
 8000336:	0018      	movs	r0, r3
 8000338:	f001 fd42 	bl	8001dc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800033c:	4b03      	ldr	r3, [pc, #12]	@ (800034c <main+0x3c>)
 800033e:	0018      	movs	r0, r3
 8000340:	f001 fd3e 	bl	8001dc0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000344:	46c0      	nop			@ (mov r8, r8)
 8000346:	e7fd      	b.n	8000344 <main+0x34>
 8000348:	20000028 	.word	0x20000028
 800034c:	20000070 	.word	0x20000070

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b590      	push	{r4, r7, lr}
 8000352:	b099      	sub	sp, #100	@ 0x64
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	242c      	movs	r4, #44	@ 0x2c
 8000358:	193b      	adds	r3, r7, r4
 800035a:	0018      	movs	r0, r3
 800035c:	2334      	movs	r3, #52	@ 0x34
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f002 fee3 	bl	800312c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000366:	231c      	movs	r3, #28
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	0018      	movs	r0, r3
 800036c:	2310      	movs	r3, #16
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f002 fedb 	bl	800312c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000376:	003b      	movs	r3, r7
 8000378:	0018      	movs	r0, r3
 800037a:	231c      	movs	r3, #28
 800037c:	001a      	movs	r2, r3
 800037e:	2100      	movs	r1, #0
 8000380:	f002 fed4 	bl	800312c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000384:	193b      	adds	r3, r7, r4
 8000386:	2220      	movs	r2, #32
 8000388:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800038a:	193b      	adds	r3, r7, r4
 800038c:	2201      	movs	r2, #1
 800038e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2200      	movs	r2, #0
 8000394:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	193b      	adds	r3, r7, r4
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fed1 	bl	8001140 <HAL_RCC_OscConfig>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003a2:	f000 f828 	bl	80003f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	211c      	movs	r1, #28
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2207      	movs	r2, #7
 80003ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2203      	movs	r2, #3
 80003b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2101      	movs	r1, #1
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fa41 	bl	800184c <HAL_RCC_ClockConfig>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ce:	f000 f812 	bl	80003f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003d2:	003b      	movs	r3, r7
 80003d4:	2202      	movs	r2, #2
 80003d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003d8:	003b      	movs	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003de:	003b      	movs	r3, r7
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fb9f 	bl	8001b24 <HAL_RCCEx_PeriphCLKConfig>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003ea:	f000 f804 	bl	80003f6 <Error_Handler>
  }
}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b019      	add	sp, #100	@ 0x64
 80003f4:	bd90      	pop	{r4, r7, pc}

080003f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fa:	b672      	cpsid	i
}
 80003fc:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	e7fd      	b.n	80003fe <Error_Handler+0x8>
	...

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040a:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <HAL_MspInit+0x44>)
 800040c:	699a      	ldr	r2, [r3, #24]
 800040e:	4b0e      	ldr	r3, [pc, #56]	@ (8000448 <HAL_MspInit+0x44>)
 8000410:	2101      	movs	r1, #1
 8000412:	430a      	orrs	r2, r1
 8000414:	619a      	str	r2, [r3, #24]
 8000416:	4b0c      	ldr	r3, [pc, #48]	@ (8000448 <HAL_MspInit+0x44>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	2201      	movs	r2, #1
 800041c:	4013      	ands	r3, r2
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <HAL_MspInit+0x44>)
 8000424:	69da      	ldr	r2, [r3, #28]
 8000426:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <HAL_MspInit+0x44>)
 8000428:	2180      	movs	r1, #128	@ 0x80
 800042a:	0549      	lsls	r1, r1, #21
 800042c:	430a      	orrs	r2, r1
 800042e:	61da      	str	r2, [r3, #28]
 8000430:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <HAL_MspInit+0x44>)
 8000432:	69da      	ldr	r2, [r3, #28]
 8000434:	2380      	movs	r3, #128	@ 0x80
 8000436:	055b      	lsls	r3, r3, #21
 8000438:	4013      	ands	r3, r2
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	40021000 	.word	0x40021000

0800044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000450:	46c0      	nop			@ (mov r8, r8)
 8000452:	e7fd      	b.n	8000450 <NMI_Handler+0x4>

08000454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000458:	46c0      	nop			@ (mov r8, r8)
 800045a:	e7fd      	b.n	8000458 <HardFault_Handler+0x4>

0800045c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000460:	46c0      	nop			@ (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000474:	f000 fbba 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000484:	2390      	movs	r3, #144	@ 0x90
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	2120      	movs	r1, #32
 800048a:	0018      	movs	r0, r3
 800048c:	f000 fe3d 	bl	800110a <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2c>)
 8000492:	0018      	movs	r0, r3
 8000494:	f001 fd3f 	bl	8001f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */
  TIM1->CR1 |= 0x00000001;
 8000498:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4b04      	ldr	r3, [pc, #16]	@ (80004b0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>)
 800049e:	2101      	movs	r1, #1
 80004a0:	430a      	orrs	r2, r1
 80004a2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	20000028 	.word	0x20000028
 80004b0:	40012c00 	.word	0x40012c00

080004b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004b8:	4b03      	ldr	r3, [pc, #12]	@ (80004c8 <TIM1_CC_IRQHandler+0x14>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f001 fd2b 	bl	8001f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	20000028 	.word	0x20000028

080004cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004d0:	4b03      	ldr	r3, [pc, #12]	@ (80004e0 <TIM2_IRQHandler+0x14>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fd1f 	bl	8001f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004d8:	46c0      	nop			@ (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	20000070 	.word	0x20000070

080004e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80004e8:	4b03      	ldr	r3, [pc, #12]	@ (80004f8 <TIM3_IRQHandler+0x14>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 fd13 	bl	8001f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	200000b8 	.word	0x200000b8

080004fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050e:	2308      	movs	r3, #8
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2310      	movs	r3, #16
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 fe07 	bl	800312c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051e:	003b      	movs	r3, r7
 8000520:	0018      	movs	r0, r3
 8000522:	2308      	movs	r3, #8
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f002 fe00 	bl	800312c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800052c:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 800052e:	4a25      	ldr	r2, [pc, #148]	@ (80005c4 <MX_TIM1_Init+0xbc>)
 8000530:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 8000532:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 8000534:	4a24      	ldr	r2, [pc, #144]	@ (80005c8 <MX_TIM1_Init+0xc0>)
 8000536:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000538:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800053e:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 8000540:	4a22      	ldr	r2, [pc, #136]	@ (80005cc <MX_TIM1_Init+0xc4>)
 8000542:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800054a:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000550:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000556:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 8000558:	0018      	movs	r0, r3
 800055a:	f001 fbe1 	bl	8001d20 <HAL_TIM_Base_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000562:	f7ff ff48 	bl	80003f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000566:	2108      	movs	r1, #8
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2280      	movs	r2, #128	@ 0x80
 800056c:	0152      	lsls	r2, r2, #5
 800056e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000570:	187a      	adds	r2, r7, r1
 8000572:	4b13      	ldr	r3, [pc, #76]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fdbc 	bl	80020f4 <HAL_TIM_ConfigClockSource>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000580:	f7ff ff39 	bl	80003f6 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000584:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 8000586:	2108      	movs	r1, #8
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fc6b 	bl	8001e64 <HAL_TIM_OnePulse_Init>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000592:	f7ff ff30 	bl	80003f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000596:	003b      	movs	r3, r7
 8000598:	2220      	movs	r2, #32
 800059a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005a2:	003a      	movs	r2, r7
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_TIM1_Init+0xb8>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 f89f 	bl	80026ec <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80005b2:	f7ff ff20 	bl	80003f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b006      	add	sp, #24
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	20000028 	.word	0x20000028
 80005c4:	40012c00 	.word	0x40012c00
 80005c8:	0000bb7f 	.word	0x0000bb7f
 80005cc:	0000ea60 	.word	0x0000ea60

080005d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005d6:	230c      	movs	r3, #12
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	0018      	movs	r0, r3
 80005dc:	2314      	movs	r3, #20
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f002 fda3 	bl	800312c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	0018      	movs	r0, r3
 80005ea:	2308      	movs	r3, #8
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 fd9c 	bl	800312c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f4:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <MX_TIM2_Init+0xb8>)
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	05d2      	lsls	r2, r2, #23
 80005fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <MX_TIM2_Init+0xb8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <MX_TIM2_Init+0xb8>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60;
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <MX_TIM2_Init+0xb8>)
 800060a:	223c      	movs	r2, #60	@ 0x3c
 800060c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060e:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <MX_TIM2_Init+0xb8>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000614:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <MX_TIM2_Init+0xb8>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800061a:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <MX_TIM2_Init+0xb8>)
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fb7f 	bl	8001d20 <HAL_TIM_Base_Init>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000626:	f7ff fee6 	bl	80003f6 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800062a:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <MX_TIM2_Init+0xb8>)
 800062c:	2108      	movs	r1, #8
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fc18 	bl	8001e64 <HAL_TIM_OnePulse_Init>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000638:	f7ff fedd 	bl	80003f6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800063c:	210c      	movs	r1, #12
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2206      	movs	r2, #6
 8000642:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800064a:	187a      	adds	r2, r7, r1
 800064c:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_TIM2_Init+0xb8>)
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f001 fe23 	bl	800229c <HAL_TIM_SlaveConfigSynchro>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800065a:	f7ff fecc 	bl	80003f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2210      	movs	r2, #16
 8000662:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800066a:	1d3a      	adds	r2, r7, #4
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_TIM2_Init+0xb8>)
 800066e:	0011      	movs	r1, r2
 8000670:	0018      	movs	r0, r3
 8000672:	f002 f83b 	bl	80026ec <HAL_TIMEx_MasterConfigSynchronization>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800067a:	f7ff febc 	bl	80003f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b008      	add	sp, #32
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	20000070 	.word	0x20000070

0800068c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000692:	230c      	movs	r3, #12
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	0018      	movs	r0, r3
 8000698:	2314      	movs	r3, #20
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 fd45 	bl	800312c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	2308      	movs	r3, #8
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f002 fd3e 	bl	800312c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_TIM3_Init+0xa4>)
 80006b2:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <MX_TIM3_Init+0xa8>)
 80006b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <MX_TIM3_Init+0xa4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <MX_TIM3_Init+0xa4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_TIM3_Init+0xa4>)
 80006c4:	220c      	movs	r2, #12
 80006c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <MX_TIM3_Init+0xa4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_TIM3_Init+0xa4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_TIM3_Init+0xa4>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fb22 	bl	8001d20 <HAL_TIM_Base_Init>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80006e0:	f7ff fe89 	bl	80003f6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80006e4:	210c      	movs	r1, #12
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2206      	movs	r2, #6
 80006ea:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2210      	movs	r2, #16
 80006f0:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80006f2:	187a      	adds	r2, r7, r1
 80006f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_TIM3_Init+0xa4>)
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fdcf 	bl	800229c <HAL_TIM_SlaveConfigSynchro>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000702:	f7ff fe78 	bl	80003f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000712:	1d3a      	adds	r2, r7, #4
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_TIM3_Init+0xa4>)
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f001 ffe7 	bl	80026ec <HAL_TIMEx_MasterConfigSynchronization>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000722:	f7ff fe68 	bl	80003f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b008      	add	sp, #32
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	200000b8 	.word	0x200000b8
 8000734:	40000400 	.word	0x40000400

08000738 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <HAL_TIM_Base_MspInit+0xc0>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d11e      	bne.n	8000788 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800074a:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <HAL_TIM_Base_MspInit+0xc4>)
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	4b2b      	ldr	r3, [pc, #172]	@ (80007fc <HAL_TIM_Base_MspInit+0xc4>)
 8000750:	2180      	movs	r1, #128	@ 0x80
 8000752:	0109      	lsls	r1, r1, #4
 8000754:	430a      	orrs	r2, r1
 8000756:	619a      	str	r2, [r3, #24]
 8000758:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <HAL_TIM_Base_MspInit+0xc4>)
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	4013      	ands	r3, r2
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	200d      	movs	r0, #13
 800076c:	f000 fb06 	bl	8000d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000770:	200d      	movs	r0, #13
 8000772:	f000 fb18 	bl	8000da6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	200e      	movs	r0, #14
 800077c:	f000 fafe 	bl	8000d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000780:	200e      	movs	r0, #14
 8000782:	f000 fb10 	bl	8000da6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000786:	e033      	b.n	80007f0 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM2)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	429a      	cmp	r2, r3
 8000792:	d114      	bne.n	80007be <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000794:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <HAL_TIM_Base_MspInit+0xc4>)
 8000796:	69da      	ldr	r2, [r3, #28]
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <HAL_TIM_Base_MspInit+0xc4>)
 800079a:	2101      	movs	r1, #1
 800079c:	430a      	orrs	r2, r1
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <HAL_TIM_Base_MspInit+0xc4>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	2201      	movs	r2, #1
 80007a6:	4013      	ands	r3, r2
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	200f      	movs	r0, #15
 80007b2:	f000 fae3 	bl	8000d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 faf5 	bl	8000da6 <HAL_NVIC_EnableIRQ>
}
 80007bc:	e018      	b.n	80007f0 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM3)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000800 <HAL_TIM_Base_MspInit+0xc8>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d113      	bne.n	80007f0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <HAL_TIM_Base_MspInit+0xc4>)
 80007ca:	69da      	ldr	r2, [r3, #28]
 80007cc:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <HAL_TIM_Base_MspInit+0xc4>)
 80007ce:	2102      	movs	r1, #2
 80007d0:	430a      	orrs	r2, r1
 80007d2:	61da      	str	r2, [r3, #28]
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <HAL_TIM_Base_MspInit+0xc4>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	2202      	movs	r2, #2
 80007da:	4013      	ands	r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2010      	movs	r0, #16
 80007e6:	f000 fac9 	bl	8000d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007ea:	2010      	movs	r0, #16
 80007ec:	f000 fadb 	bl	8000da6 <HAL_NVIC_EnableIRQ>
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b006      	add	sp, #24
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40012c00 	.word	0x40012c00
 80007fc:	40021000 	.word	0x40021000
 8000800:	40000400 	.word	0x40000400

08000804 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000808:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_TSC_Init+0x80>)
 800080a:	4a1f      	ldr	r2, [pc, #124]	@ (8000888 <MX_TSC_Init+0x84>)
 800080c:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_TSC_Init+0x80>)
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	0552      	lsls	r2, r2, #21
 8000814:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_TSC_Init+0x80>)
 8000818:	2280      	movs	r2, #128	@ 0x80
 800081a:	0452      	lsls	r2, r2, #17
 800081c:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_TSC_Init+0x80>)
 8000820:	2200      	movs	r2, #0
 8000822:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_TSC_Init+0x80>)
 8000826:	2201      	movs	r2, #1
 8000828:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_TSC_Init+0x80>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_TSC_Init+0x80>)
 8000832:	2280      	movs	r2, #128	@ 0x80
 8000834:	0192      	lsls	r2, r2, #6
 8000836:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_TSC_Init+0x80>)
 800083a:	22a0      	movs	r2, #160	@ 0xa0
 800083c:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_TSC_Init+0x80>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_TSC_Init+0x80>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_TSC_Init+0x80>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_TSC_Init+0x80>)
 8000852:	222c      	movs	r2, #44	@ 0x2c
 8000854:	2100      	movs	r1, #0
 8000856:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4|TSC_GROUP3_IO1|TSC_GROUP3_IO2
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <MX_TSC_Init+0x80>)
 800085a:	22bc      	movs	r2, #188	@ 0xbc
 800085c:	0112      	lsls	r2, r2, #4
 800085e:	631a      	str	r2, [r3, #48]	@ 0x30
                    |TSC_GROUP3_IO4;
  htsc.Init.ShieldIOs = 0;
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_TSC_Init+0x80>)
 8000862:	2200      	movs	r2, #0
 8000864:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1|TSC_GROUP3_IO3;
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_TSC_Init+0x80>)
 8000868:	2282      	movs	r2, #130	@ 0x82
 800086a:	00d2      	lsls	r2, r2, #3
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 800086e:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <MX_TSC_Init+0x80>)
 8000870:	0018      	movs	r0, r3
 8000872:	f001 ffa9 	bl	80027c8 <HAL_TSC_Init>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 800087a:	f7ff fdbc 	bl	80003f6 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000100 	.word	0x20000100
 8000888:	40024000 	.word	0x40024000

0800088c <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b08d      	sub	sp, #52	@ 0x34
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	241c      	movs	r4, #28
 8000896:	193b      	adds	r3, r7, r4
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f002 fc44 	bl	800312c <memset>
  if(tscHandle->Instance==TSC)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a55      	ldr	r2, [pc, #340]	@ (8000a00 <HAL_TSC_MspInit+0x174>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d000      	beq.n	80008b0 <HAL_TSC_MspInit+0x24>
 80008ae:	e0a3      	b.n	80009f8 <HAL_TSC_MspInit+0x16c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 80008b0:	4b54      	ldr	r3, [pc, #336]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	4b53      	ldr	r3, [pc, #332]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 80008b6:	2180      	movs	r1, #128	@ 0x80
 80008b8:	0449      	lsls	r1, r1, #17
 80008ba:	430a      	orrs	r2, r1
 80008bc:	615a      	str	r2, [r3, #20]
 80008be:	4b51      	ldr	r3, [pc, #324]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 80008c0:	695a      	ldr	r2, [r3, #20]
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	045b      	lsls	r3, r3, #17
 80008c6:	4013      	ands	r3, r2
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b4d      	ldr	r3, [pc, #308]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 80008ce:	695a      	ldr	r2, [r3, #20]
 80008d0:	4b4c      	ldr	r3, [pc, #304]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 80008d2:	2180      	movs	r1, #128	@ 0x80
 80008d4:	0289      	lsls	r1, r1, #10
 80008d6:	430a      	orrs	r2, r1
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	4b4a      	ldr	r3, [pc, #296]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 80008dc:	695a      	ldr	r2, [r3, #20]
 80008de:	2380      	movs	r3, #128	@ 0x80
 80008e0:	029b      	lsls	r3, r3, #10
 80008e2:	4013      	ands	r3, r2
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e8:	4b46      	ldr	r3, [pc, #280]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 80008ea:	695a      	ldr	r2, [r3, #20]
 80008ec:	4b45      	ldr	r3, [pc, #276]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 80008ee:	2180      	movs	r1, #128	@ 0x80
 80008f0:	0309      	lsls	r1, r1, #12
 80008f2:	430a      	orrs	r2, r1
 80008f4:	615a      	str	r2, [r3, #20]
 80008f6:	4b43      	ldr	r3, [pc, #268]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	2380      	movs	r3, #128	@ 0x80
 80008fc:	031b      	lsls	r3, r3, #12
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	4b3f      	ldr	r3, [pc, #252]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 8000906:	695a      	ldr	r2, [r3, #20]
 8000908:	4b3e      	ldr	r3, [pc, #248]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 800090a:	2180      	movs	r1, #128	@ 0x80
 800090c:	02c9      	lsls	r1, r1, #11
 800090e:	430a      	orrs	r2, r1
 8000910:	615a      	str	r2, [r3, #20]
 8000912:	4b3c      	ldr	r3, [pc, #240]	@ (8000a04 <HAL_TSC_MspInit+0x178>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	2380      	movs	r3, #128	@ 0x80
 8000918:	02db      	lsls	r3, r3, #11
 800091a:	4013      	ands	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> TSC_G3_IO1
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    PB2     ------> TSC_G3_IO4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2210      	movs	r2, #16
 8000924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2212      	movs	r2, #18
 800092a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2203      	movs	r2, #3
 800093c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	193a      	adds	r2, r7, r4
 8000940:	2390      	movs	r3, #144	@ 0x90
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fa4a 	bl	8000de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	22c0      	movs	r2, #192	@ 0xc0
 8000950:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2202      	movs	r2, #2
 8000956:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2203      	movs	r2, #3
 8000968:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	193a      	adds	r2, r7, r4
 800096c:	2390      	movs	r3, #144	@ 0x90
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fa34 	bl	8000de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2220      	movs	r2, #32
 800097c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2202      	movs	r2, #2
 8000982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TSC;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	193b      	adds	r3, r7, r4
 8000998:	4a1b      	ldr	r2, [pc, #108]	@ (8000a08 <HAL_TSC_MspInit+0x17c>)
 800099a:	0019      	movs	r1, r3
 800099c:	0010      	movs	r0, r2
 800099e:	f000 fa1f 	bl	8000de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2205      	movs	r2, #5
 80009a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2202      	movs	r2, #2
 80009ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2203      	movs	r2, #3
 80009be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	4a12      	ldr	r2, [pc, #72]	@ (8000a0c <HAL_TSC_MspInit+0x180>)
 80009c4:	0019      	movs	r1, r3
 80009c6:	0010      	movs	r0, r2
 80009c8:	f000 fa0a 	bl	8000de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009cc:	0021      	movs	r1, r4
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2202      	movs	r2, #2
 80009d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2212      	movs	r2, #18
 80009d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2203      	movs	r2, #3
 80009ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_TSC_MspInit+0x180>)
 80009f0:	0019      	movs	r1, r3
 80009f2:	0010      	movs	r0, r2
 80009f4:	f000 f9f4 	bl	8000de0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b00d      	add	sp, #52	@ 0x34
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	40024000 	.word	0x40024000
 8000a04:	40021000 	.word	0x40021000
 8000a08:	48000800 	.word	0x48000800
 8000a0c:	48000400 	.word	0x48000400

08000a10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a16:	4a15      	ldr	r2, [pc, #84]	@ (8000a6c <MX_USART2_UART_Init+0x5c>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a1c:	2296      	movs	r2, #150	@ 0x96
 8000a1e:	0212      	lsls	r2, r2, #8
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 ff5d 	bl	8002914 <HAL_UART_Init>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f7ff fcca 	bl	80003f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000144 	.word	0x20000144
 8000a6c:	40004400 	.word	0x40004400

08000a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b08b      	sub	sp, #44	@ 0x2c
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	2414      	movs	r4, #20
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	2314      	movs	r3, #20
 8000a80:	001a      	movs	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f002 fb52 	bl	800312c <memset>
  if(uartHandle->Instance==USART2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <HAL_UART_MspInit+0x90>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d132      	bne.n	8000af8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a92:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <HAL_UART_MspInit+0x94>)
 8000a94:	69da      	ldr	r2, [r3, #28]
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <HAL_UART_MspInit+0x94>)
 8000a98:	2180      	movs	r1, #128	@ 0x80
 8000a9a:	0289      	lsls	r1, r1, #10
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	61da      	str	r2, [r3, #28]
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0x94>)
 8000aa2:	69da      	ldr	r2, [r3, #28]
 8000aa4:	2380      	movs	r3, #128	@ 0x80
 8000aa6:	029b      	lsls	r3, r3, #10
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_UART_MspInit+0x94>)
 8000ab0:	695a      	ldr	r2, [r3, #20]
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <HAL_UART_MspInit+0x94>)
 8000ab4:	2180      	movs	r1, #128	@ 0x80
 8000ab6:	0289      	lsls	r1, r1, #10
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_UART_MspInit+0x94>)
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	2380      	movs	r3, #128	@ 0x80
 8000ac2:	029b      	lsls	r3, r3, #10
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aca:	0021      	movs	r1, r4
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	187a      	adds	r2, r7, r1
 8000aec:	2390      	movs	r3, #144	@ 0x90
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f974 	bl	8000de0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b00b      	add	sp, #44	@ 0x2c
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40021000 	.word	0x40021000

08000b08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b08:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff fcf6 	bl	80004fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	@ (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	@ (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b36:	f002 fb01 	bl	800313c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3a:	f7ff fbe9 	bl	8000310 <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   r0, =_estack
 8000b40:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b4c:	080031dc 	.word	0x080031dc
  ldr r2, =_sbss
 8000b50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b54:	200001d0 	.word	0x200001d0

08000b58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_COMP_IRQHandler>
	...

08000b5c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <HAL_Init+0x24>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_Init+0x24>)
 8000b66:	2110      	movs	r1, #16
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 f809 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b72:	f7ff fc47 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <HAL_InitTick+0x5c>)
 8000b8e:	681c      	ldr	r4, [r3, #0]
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_InitTick+0x60>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	0019      	movs	r1, r3
 8000b96:	23fa      	movs	r3, #250	@ 0xfa
 8000b98:	0098      	lsls	r0, r3, #2
 8000b9a:	f7ff fab5 	bl	8000108 <__udivsi3>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f7ff fab0 	bl	8000108 <__udivsi3>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 f90b 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e00f      	b.n	8000bd8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d80b      	bhi.n	8000bd6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f8d8 	bl	8000d7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_InitTick+0x64>)
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b003      	add	sp, #12
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_IncTick+0x1c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	18d2      	adds	r2, r2, r3
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	200001cc 	.word	0x200001cc

08000c10 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b02      	ldr	r3, [pc, #8]	@ (8000c20 <HAL_GetTick+0x10>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	200001cc 	.word	0x200001cc

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c36:	d809      	bhi.n	8000c4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	231f      	movs	r3, #31
 8000c40:	401a      	ands	r2, r3
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_EnableIRQ+0x30>)
 8000c44:	2101      	movs	r1, #1
 8000c46:	4091      	lsls	r1, r2
 8000c48:	000a      	movs	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]
  }
}
 8000c4c:	46c0      	nop			@ (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	0002      	movs	r2, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c6c:	d828      	bhi.n	8000cc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d2c <__NVIC_SetPriority+0xd4>)
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	33c0      	adds	r3, #192	@ 0xc0
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	589b      	ldr	r3, [r3, r2]
 8000c7e:	1dfa      	adds	r2, r7, #7
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	0011      	movs	r1, r2
 8000c84:	2203      	movs	r2, #3
 8000c86:	400a      	ands	r2, r1
 8000c88:	00d2      	lsls	r2, r2, #3
 8000c8a:	21ff      	movs	r1, #255	@ 0xff
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	000a      	movs	r2, r1
 8000c90:	43d2      	mvns	r2, r2
 8000c92:	401a      	ands	r2, r3
 8000c94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	019b      	lsls	r3, r3, #6
 8000c9a:	22ff      	movs	r2, #255	@ 0xff
 8000c9c:	401a      	ands	r2, r3
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	4003      	ands	r3, r0
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	481f      	ldr	r0, [pc, #124]	@ (8000d2c <__NVIC_SetPriority+0xd4>)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	33c0      	adds	r3, #192	@ 0xc0
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cbe:	e031      	b.n	8000d24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <__NVIC_SetPriority+0xd8>)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	230f      	movs	r3, #15
 8000cca:	400b      	ands	r3, r1
 8000ccc:	3b08      	subs	r3, #8
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3306      	adds	r3, #6
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	18d3      	adds	r3, r2, r3
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1dfa      	adds	r2, r7, #7
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	0011      	movs	r1, r2
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	00d2      	lsls	r2, r2, #3
 8000ce6:	21ff      	movs	r1, #255	@ 0xff
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	401a      	ands	r2, r3
 8000cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	22ff      	movs	r2, #255	@ 0xff
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2303      	movs	r3, #3
 8000d02:	4003      	ands	r3, r0
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d08:	4809      	ldr	r0, [pc, #36]	@ (8000d30 <__NVIC_SetPriority+0xd8>)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	001c      	movs	r4, r3
 8000d10:	230f      	movs	r3, #15
 8000d12:	4023      	ands	r3, r4
 8000d14:	3b08      	subs	r3, #8
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	3306      	adds	r3, #6
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	18c3      	adds	r3, r0, r3
 8000d20:	3304      	adds	r3, #4
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b003      	add	sp, #12
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	1e5a      	subs	r2, r3, #1
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	045b      	lsls	r3, r3, #17
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d301      	bcc.n	8000d4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e010      	b.n	8000d6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <SysTick_Config+0x44>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	3a01      	subs	r2, #1
 8000d52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d54:	2301      	movs	r3, #1
 8000d56:	425b      	negs	r3, r3
 8000d58:	2103      	movs	r1, #3
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff ff7c 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <SysTick_Config+0x44>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <SysTick_Config+0x44>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	210f      	movs	r1, #15
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	1c02      	adds	r2, r0, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	0002      	movs	r2, r0
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff ff33 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ffaf 	bl	8000d34 <SysTick_Config>
 8000dd6:	0003      	movs	r3, r0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e155      	b.n	800109c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <HAL_GPIO_Init+0x28>
 8000e06:	e146      	b.n	8001096 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d130      	bne.n	8000e82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	43da      	mvns	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	409a      	lsls	r2, r3
 8000e42:	0013      	movs	r3, r2
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e56:	2201      	movs	r2, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d017      	beq.n	8000ebe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	58d3      	ldr	r3, [r2, r3]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	2207      	movs	r2, #7
 8000edc:	4013      	ands	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	6939      	ldr	r1, [r7, #16]
 8000f10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	401a      	ands	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	23c0      	movs	r3, #192	@ 0xc0
 8000f4c:	029b      	lsls	r3, r3, #10
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d100      	bne.n	8000f54 <HAL_GPIO_Init+0x174>
 8000f52:	e0a0      	b.n	8001096 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b57      	ldr	r3, [pc, #348]	@ (80010b4 <HAL_GPIO_Init+0x2d4>)
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	4b56      	ldr	r3, [pc, #344]	@ (80010b4 <HAL_GPIO_Init+0x2d4>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	619a      	str	r2, [r3, #24]
 8000f60:	4b54      	ldr	r3, [pc, #336]	@ (80010b4 <HAL_GPIO_Init+0x2d4>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	2201      	movs	r2, #1
 8000f66:	4013      	ands	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6c:	4a52      	ldr	r2, [pc, #328]	@ (80010b8 <HAL_GPIO_Init+0x2d8>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	589b      	ldr	r3, [r3, r2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	4013      	ands	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	2390      	movs	r3, #144	@ 0x90
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a47      	ldr	r2, [pc, #284]	@ (80010bc <HAL_GPIO_Init+0x2dc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x1ea>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	@ (80010c0 <HAL_GPIO_Init+0x2e0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x1e6>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a45      	ldr	r2, [pc, #276]	@ (80010c4 <HAL_GPIO_Init+0x2e4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x1e2>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a44      	ldr	r2, [pc, #272]	@ (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x1de>
 8000fba:	2304      	movs	r3, #4
 8000fbc:	e008      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fe0:	4935      	ldr	r1, [pc, #212]	@ (80010b8 <HAL_GPIO_Init+0x2d8>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b37      	ldr	r3, [pc, #220]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	2380      	movs	r3, #128	@ 0x80
 8001004:	035b      	lsls	r3, r3, #13
 8001006:	4013      	ands	r3, r2
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001012:	4b2e      	ldr	r3, [pc, #184]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001018:	4b2c      	ldr	r3, [pc, #176]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43da      	mvns	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	039b      	lsls	r3, r3, #14
 8001030:	4013      	ands	r3, r2
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001042:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43da      	mvns	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	2380      	movs	r3, #128	@ 0x80
 8001058:	029b      	lsls	r3, r3, #10
 800105a:	4013      	ands	r3, r2
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	4013      	ands	r3, r2
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	40da      	lsrs	r2, r3
 80010a4:	1e13      	subs	r3, r2, #0
 80010a6:	d000      	beq.n	80010aa <HAL_GPIO_Init+0x2ca>
 80010a8:	e6a2      	b.n	8000df0 <HAL_GPIO_Init+0x10>
  } 
}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b006      	add	sp, #24
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	48000800 	.word	0x48000800
 80010c4:	48000c00 	.word	0x48000c00
 80010c8:	48001000 	.word	0x48001000
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	0008      	movs	r0, r1
 80010da:	0011      	movs	r1, r2
 80010dc:	1cbb      	adds	r3, r7, #2
 80010de:	1c02      	adds	r2, r0, #0
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	1c7b      	adds	r3, r7, #1
 80010e4:	1c0a      	adds	r2, r1, #0
 80010e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e8:	1c7b      	adds	r3, r7, #1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f0:	1cbb      	adds	r3, r7, #2
 80010f2:	881a      	ldrh	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f8:	e003      	b.n	8001102 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fa:	1cbb      	adds	r3, r7, #2
 80010fc:	881a      	ldrh	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	000a      	movs	r2, r1
 8001114:	1cbb      	adds	r3, r7, #2
 8001116:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800111e:	1cbb      	adds	r3, r7, #2
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4013      	ands	r3, r2
 8001126:	041a      	lsls	r2, r3, #16
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	1cb9      	adds	r1, r7, #2
 800112e:	8809      	ldrh	r1, [r1, #0]
 8001130:	400b      	ands	r3, r1
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
}
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b004      	add	sp, #16
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	f000 fb76 	bl	8001840 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2201      	movs	r2, #1
 800115a:	4013      	ands	r3, r2
 800115c:	d100      	bne.n	8001160 <HAL_RCC_OscConfig+0x20>
 800115e:	e08e      	b.n	800127e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001160:	4bc5      	ldr	r3, [pc, #788]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	220c      	movs	r2, #12
 8001166:	4013      	ands	r3, r2
 8001168:	2b04      	cmp	r3, #4
 800116a:	d00e      	beq.n	800118a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800116c:	4bc2      	ldr	r3, [pc, #776]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	220c      	movs	r2, #12
 8001172:	4013      	ands	r3, r2
 8001174:	2b08      	cmp	r3, #8
 8001176:	d117      	bne.n	80011a8 <HAL_RCC_OscConfig+0x68>
 8001178:	4bbf      	ldr	r3, [pc, #764]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	23c0      	movs	r3, #192	@ 0xc0
 800117e:	025b      	lsls	r3, r3, #9
 8001180:	401a      	ands	r2, r3
 8001182:	2380      	movs	r3, #128	@ 0x80
 8001184:	025b      	lsls	r3, r3, #9
 8001186:	429a      	cmp	r2, r3
 8001188:	d10e      	bne.n	80011a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118a:	4bbb      	ldr	r3, [pc, #748]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	2380      	movs	r3, #128	@ 0x80
 8001190:	029b      	lsls	r3, r3, #10
 8001192:	4013      	ands	r3, r2
 8001194:	d100      	bne.n	8001198 <HAL_RCC_OscConfig+0x58>
 8001196:	e071      	b.n	800127c <HAL_RCC_OscConfig+0x13c>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d000      	beq.n	80011a2 <HAL_RCC_OscConfig+0x62>
 80011a0:	e06c      	b.n	800127c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f000 fb4c 	bl	8001840 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d107      	bne.n	80011c0 <HAL_RCC_OscConfig+0x80>
 80011b0:	4bb1      	ldr	r3, [pc, #708]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4bb0      	ldr	r3, [pc, #704]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80011b6:	2180      	movs	r1, #128	@ 0x80
 80011b8:	0249      	lsls	r1, r1, #9
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e02f      	b.n	8001220 <HAL_RCC_OscConfig+0xe0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0xa2>
 80011c8:	4bab      	ldr	r3, [pc, #684]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4baa      	ldr	r3, [pc, #680]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80011ce:	49ab      	ldr	r1, [pc, #684]	@ (800147c <HAL_RCC_OscConfig+0x33c>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	4ba8      	ldr	r3, [pc, #672]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4ba7      	ldr	r3, [pc, #668]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80011da:	49a9      	ldr	r1, [pc, #676]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80011dc:	400a      	ands	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e01e      	b.n	8001220 <HAL_RCC_OscConfig+0xe0>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d10e      	bne.n	8001208 <HAL_RCC_OscConfig+0xc8>
 80011ea:	4ba3      	ldr	r3, [pc, #652]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4ba2      	ldr	r3, [pc, #648]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80011f0:	2180      	movs	r1, #128	@ 0x80
 80011f2:	02c9      	lsls	r1, r1, #11
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	4b9f      	ldr	r3, [pc, #636]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b9e      	ldr	r3, [pc, #632]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80011fe:	2180      	movs	r1, #128	@ 0x80
 8001200:	0249      	lsls	r1, r1, #9
 8001202:	430a      	orrs	r2, r1
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xe0>
 8001208:	4b9b      	ldr	r3, [pc, #620]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b9a      	ldr	r3, [pc, #616]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800120e:	499b      	ldr	r1, [pc, #620]	@ (800147c <HAL_RCC_OscConfig+0x33c>)
 8001210:	400a      	ands	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	4b98      	ldr	r3, [pc, #608]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b97      	ldr	r3, [pc, #604]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800121a:	4999      	ldr	r1, [pc, #612]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800121c:	400a      	ands	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d014      	beq.n	8001252 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcf2 	bl	8000c10 <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001232:	f7ff fced 	bl	8000c10 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	@ 0x64
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e2fd      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001244:	4b8c      	ldr	r3, [pc, #560]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	4013      	ands	r3, r2
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0xf2>
 8001250:	e015      	b.n	800127e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fcdd 	bl	8000c10 <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fcd8 	bl	8000c10 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	@ 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e2e8      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	4b82      	ldr	r3, [pc, #520]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	029b      	lsls	r3, r3, #10
 8001276:	4013      	ands	r3, r2
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x11c>
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d100      	bne.n	800128a <HAL_RCC_OscConfig+0x14a>
 8001288:	e06c      	b.n	8001364 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800128a:	4b7b      	ldr	r3, [pc, #492]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	220c      	movs	r2, #12
 8001290:	4013      	ands	r3, r2
 8001292:	d00e      	beq.n	80012b2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001294:	4b78      	ldr	r3, [pc, #480]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	220c      	movs	r2, #12
 800129a:	4013      	ands	r3, r2
 800129c:	2b08      	cmp	r3, #8
 800129e:	d11f      	bne.n	80012e0 <HAL_RCC_OscConfig+0x1a0>
 80012a0:	4b75      	ldr	r3, [pc, #468]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	23c0      	movs	r3, #192	@ 0xc0
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	401a      	ands	r2, r3
 80012aa:	2380      	movs	r3, #128	@ 0x80
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d116      	bne.n	80012e0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	4b71      	ldr	r3, [pc, #452]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2202      	movs	r2, #2
 80012b8:	4013      	ands	r3, r2
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_OscConfig+0x188>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e2bb      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	22f8      	movs	r2, #248	@ 0xf8
 80012ce:	4393      	bics	r3, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00da      	lsls	r2, r3, #3
 80012d8:	4b67      	ldr	r3, [pc, #412]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	e041      	b.n	8001364 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d024      	beq.n	8001332 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e8:	4b63      	ldr	r3, [pc, #396]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b62      	ldr	r3, [pc, #392]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc8c 	bl	8000c10 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc87 	bl	8000c10 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e297      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	4b59      	ldr	r3, [pc, #356]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2202      	movs	r2, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d0f1      	beq.n	80012fe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	4b57      	ldr	r3, [pc, #348]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	22f8      	movs	r2, #248	@ 0xf8
 8001320:	4393      	bics	r3, r2
 8001322:	0019      	movs	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	00da      	lsls	r2, r3, #3
 800132a:	4b53      	ldr	r3, [pc, #332]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e018      	b.n	8001364 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001332:	4b51      	ldr	r3, [pc, #324]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b50      	ldr	r3, [pc, #320]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 8001338:	2101      	movs	r1, #1
 800133a:	438a      	bics	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fc67 	bl	8000c10 <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fc62 	bl	8000c10 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e272      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	4b47      	ldr	r3, [pc, #284]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2202      	movs	r2, #2
 8001360:	4013      	ands	r3, r2
 8001362:	d1f1      	bne.n	8001348 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2208      	movs	r2, #8
 800136a:	4013      	ands	r3, r2
 800136c:	d036      	beq.n	80013dc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d019      	beq.n	80013aa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b40      	ldr	r3, [pc, #256]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 8001378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800137a:	4b3f      	ldr	r3, [pc, #252]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800137c:	2101      	movs	r1, #1
 800137e:	430a      	orrs	r2, r1
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff fc45 	bl	8000c10 <HAL_GetTick>
 8001386:	0003      	movs	r3, r0
 8001388:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fc40 	bl	8000c10 <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e250      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80013a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f1      	beq.n	800138c <HAL_RCC_OscConfig+0x24c>
 80013a8:	e018      	b.n	80013dc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013aa:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80013ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013ae:	4b32      	ldr	r3, [pc, #200]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	438a      	bics	r2, r1
 80013b4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fc2b 	bl	8000c10 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fc26 	bl	8000c10 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e236      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d2:	4b29      	ldr	r3, [pc, #164]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d1f1      	bne.n	80013c0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2204      	movs	r2, #4
 80013e2:	4013      	ands	r3, r2
 80013e4:	d100      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2a8>
 80013e6:	e0b5      	b.n	8001554 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e8:	201f      	movs	r0, #31
 80013ea:	183b      	adds	r3, r7, r0
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f0:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80013f2:	69da      	ldr	r2, [r3, #28]
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	055b      	lsls	r3, r3, #21
 80013f8:	4013      	ands	r3, r2
 80013fa:	d110      	bne.n	800141e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80013fe:	69da      	ldr	r2, [r3, #28]
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 8001402:	2180      	movs	r1, #128	@ 0x80
 8001404:	0549      	lsls	r1, r1, #21
 8001406:	430a      	orrs	r2, r1
 8001408:	61da      	str	r2, [r3, #28]
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800140c:	69da      	ldr	r2, [r3, #28]
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	055b      	lsls	r3, r3, #21
 8001412:	4013      	ands	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001418:	183b      	adds	r3, r7, r0
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_RCC_OscConfig+0x344>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4013      	ands	r3, r2
 8001428:	d11a      	bne.n	8001460 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_RCC_OscConfig+0x344>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_RCC_OscConfig+0x344>)
 8001430:	2180      	movs	r1, #128	@ 0x80
 8001432:	0049      	lsls	r1, r1, #1
 8001434:	430a      	orrs	r2, r1
 8001436:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001438:	f7ff fbea 	bl	8000c10 <HAL_GetTick>
 800143c:	0003      	movs	r3, r0
 800143e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff fbe5 	bl	8000c10 <HAL_GetTick>
 8001446:	0002      	movs	r2, r0
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b64      	cmp	r3, #100	@ 0x64
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1f5      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_RCC_OscConfig+0x344>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2380      	movs	r3, #128	@ 0x80
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4013      	ands	r3, r2
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d10f      	bne.n	8001488 <HAL_RCC_OscConfig+0x348>
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	4b02      	ldr	r3, [pc, #8]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800146e:	2101      	movs	r1, #1
 8001470:	430a      	orrs	r2, r1
 8001472:	621a      	str	r2, [r3, #32]
 8001474:	e036      	b.n	80014e4 <HAL_RCC_OscConfig+0x3a4>
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	40021000 	.word	0x40021000
 800147c:	fffeffff 	.word	0xfffeffff
 8001480:	fffbffff 	.word	0xfffbffff
 8001484:	40007000 	.word	0x40007000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10c      	bne.n	80014aa <HAL_RCC_OscConfig+0x36a>
 8001490:	4bca      	ldr	r3, [pc, #808]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	4bc9      	ldr	r3, [pc, #804]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001496:	2101      	movs	r1, #1
 8001498:	438a      	bics	r2, r1
 800149a:	621a      	str	r2, [r3, #32]
 800149c:	4bc7      	ldr	r3, [pc, #796]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	4bc6      	ldr	r3, [pc, #792]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80014a2:	2104      	movs	r1, #4
 80014a4:	438a      	bics	r2, r1
 80014a6:	621a      	str	r2, [r3, #32]
 80014a8:	e01c      	b.n	80014e4 <HAL_RCC_OscConfig+0x3a4>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b05      	cmp	r3, #5
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x38c>
 80014b2:	4bc2      	ldr	r3, [pc, #776]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80014b4:	6a1a      	ldr	r2, [r3, #32]
 80014b6:	4bc1      	ldr	r3, [pc, #772]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80014b8:	2104      	movs	r1, #4
 80014ba:	430a      	orrs	r2, r1
 80014bc:	621a      	str	r2, [r3, #32]
 80014be:	4bbf      	ldr	r3, [pc, #764]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80014c0:	6a1a      	ldr	r2, [r3, #32]
 80014c2:	4bbe      	ldr	r3, [pc, #760]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	430a      	orrs	r2, r1
 80014c8:	621a      	str	r2, [r3, #32]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0x3a4>
 80014cc:	4bbb      	ldr	r3, [pc, #748]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80014ce:	6a1a      	ldr	r2, [r3, #32]
 80014d0:	4bba      	ldr	r3, [pc, #744]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80014d2:	2101      	movs	r1, #1
 80014d4:	438a      	bics	r2, r1
 80014d6:	621a      	str	r2, [r3, #32]
 80014d8:	4bb8      	ldr	r3, [pc, #736]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80014da:	6a1a      	ldr	r2, [r3, #32]
 80014dc:	4bb7      	ldr	r3, [pc, #732]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80014de:	2104      	movs	r1, #4
 80014e0:	438a      	bics	r2, r1
 80014e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d014      	beq.n	8001516 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fb90 	bl	8000c10 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	e009      	b.n	800150a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fb8b 	bl	8000c10 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4aaf      	ldr	r2, [pc, #700]	@ (80017c0 <HAL_RCC_OscConfig+0x680>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e19a      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150a:	4bac      	ldr	r3, [pc, #688]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	2202      	movs	r2, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x3b6>
 8001514:	e013      	b.n	800153e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fb7b 	bl	8000c10 <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151e:	e009      	b.n	8001534 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff fb76 	bl	8000c10 <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	4aa5      	ldr	r2, [pc, #660]	@ (80017c0 <HAL_RCC_OscConfig+0x680>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e185      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	4ba1      	ldr	r3, [pc, #644]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	2202      	movs	r2, #2
 800153a:	4013      	ands	r3, r2
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800153e:	231f      	movs	r3, #31
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001548:	4b9c      	ldr	r3, [pc, #624]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	4b9b      	ldr	r3, [pc, #620]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800154e:	499d      	ldr	r1, [pc, #628]	@ (80017c4 <HAL_RCC_OscConfig+0x684>)
 8001550:	400a      	ands	r2, r1
 8001552:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2210      	movs	r2, #16
 800155a:	4013      	ands	r3, r2
 800155c:	d063      	beq.n	8001626 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d12a      	bne.n	80015bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001566:	4b95      	ldr	r3, [pc, #596]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800156a:	4b94      	ldr	r3, [pc, #592]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800156c:	2104      	movs	r1, #4
 800156e:	430a      	orrs	r2, r1
 8001570:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001572:	4b92      	ldr	r3, [pc, #584]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001576:	4b91      	ldr	r3, [pc, #580]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001578:	2101      	movs	r1, #1
 800157a:	430a      	orrs	r2, r1
 800157c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fb47 	bl	8000c10 <HAL_GetTick>
 8001582:	0003      	movs	r3, r0
 8001584:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001588:	f7ff fb42 	bl	8000c10 <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e152      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800159a:	4b88      	ldr	r3, [pc, #544]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800159c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d0f1      	beq.n	8001588 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015a4:	4b85      	ldr	r3, [pc, #532]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80015a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a8:	22f8      	movs	r2, #248	@ 0xf8
 80015aa:	4393      	bics	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	00da      	lsls	r2, r3, #3
 80015b4:	4b81      	ldr	r3, [pc, #516]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80015b6:	430a      	orrs	r2, r1
 80015b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80015ba:	e034      	b.n	8001626 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	3305      	adds	r3, #5
 80015c2:	d111      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015c4:	4b7d      	ldr	r3, [pc, #500]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80015c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015c8:	4b7c      	ldr	r3, [pc, #496]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80015ca:	2104      	movs	r1, #4
 80015cc:	438a      	bics	r2, r1
 80015ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015d0:	4b7a      	ldr	r3, [pc, #488]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80015d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d4:	22f8      	movs	r2, #248	@ 0xf8
 80015d6:	4393      	bics	r3, r2
 80015d8:	0019      	movs	r1, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	00da      	lsls	r2, r3, #3
 80015e0:	4b76      	ldr	r3, [pc, #472]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80015e2:	430a      	orrs	r2, r1
 80015e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80015e6:	e01e      	b.n	8001626 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015e8:	4b74      	ldr	r3, [pc, #464]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80015ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015ec:	4b73      	ldr	r3, [pc, #460]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80015ee:	2104      	movs	r1, #4
 80015f0:	430a      	orrs	r2, r1
 80015f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015f4:	4b71      	ldr	r3, [pc, #452]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80015f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015f8:	4b70      	ldr	r3, [pc, #448]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	438a      	bics	r2, r1
 80015fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fb06 	bl	8000c10 <HAL_GetTick>
 8001604:	0003      	movs	r3, r0
 8001606:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800160a:	f7ff fb01 	bl	8000c10 <HAL_GetTick>
 800160e:	0002      	movs	r2, r0
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e111      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800161c:	4b67      	ldr	r3, [pc, #412]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800161e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d1f1      	bne.n	800160a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2220      	movs	r2, #32
 800162c:	4013      	ands	r3, r2
 800162e:	d05c      	beq.n	80016ea <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001630:	4b62      	ldr	r3, [pc, #392]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	220c      	movs	r2, #12
 8001636:	4013      	ands	r3, r2
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d00e      	beq.n	800165a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800163c:	4b5f      	ldr	r3, [pc, #380]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	220c      	movs	r2, #12
 8001642:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001644:	2b08      	cmp	r3, #8
 8001646:	d114      	bne.n	8001672 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001648:	4b5c      	ldr	r3, [pc, #368]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	23c0      	movs	r3, #192	@ 0xc0
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	401a      	ands	r2, r3
 8001652:	23c0      	movs	r3, #192	@ 0xc0
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	429a      	cmp	r2, r3
 8001658:	d10b      	bne.n	8001672 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800165a:	4b58      	ldr	r3, [pc, #352]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800165c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800165e:	2380      	movs	r3, #128	@ 0x80
 8001660:	029b      	lsls	r3, r3, #10
 8001662:	4013      	ands	r3, r2
 8001664:	d040      	beq.n	80016e8 <HAL_RCC_OscConfig+0x5a8>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d03c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0e6      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d01b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800167a:	4b50      	ldr	r3, [pc, #320]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800167c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800167e:	4b4f      	ldr	r3, [pc, #316]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001680:	2180      	movs	r1, #128	@ 0x80
 8001682:	0249      	lsls	r1, r1, #9
 8001684:	430a      	orrs	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fac2 	bl	8000c10 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001692:	f7ff fabd 	bl	8000c10 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0cd      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016a4:	4b45      	ldr	r3, [pc, #276]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80016a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	029b      	lsls	r3, r3, #10
 80016ac:	4013      	ands	r3, r2
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x552>
 80016b0:	e01b      	b.n	80016ea <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80016b2:	4b42      	ldr	r3, [pc, #264]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80016b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016b6:	4b41      	ldr	r3, [pc, #260]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80016b8:	4943      	ldr	r1, [pc, #268]	@ (80017c8 <HAL_RCC_OscConfig+0x688>)
 80016ba:	400a      	ands	r2, r1
 80016bc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff faa7 	bl	8000c10 <HAL_GetTick>
 80016c2:	0003      	movs	r3, r0
 80016c4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c8:	f7ff faa2 	bl	8000c10 <HAL_GetTick>
 80016cc:	0002      	movs	r2, r0
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e0b2      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016da:	4b38      	ldr	r3, [pc, #224]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80016dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	029b      	lsls	r3, r3, #10
 80016e2:	4013      	ands	r3, r2
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x588>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80016e8:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d100      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5b4>
 80016f2:	e0a4      	b.n	800183e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f4:	4b31      	ldr	r3, [pc, #196]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	220c      	movs	r2, #12
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d100      	bne.n	8001702 <HAL_RCC_OscConfig+0x5c2>
 8001700:	e078      	b.n	80017f4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	2b02      	cmp	r3, #2
 8001708:	d14c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b2c      	ldr	r3, [pc, #176]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001710:	492e      	ldr	r1, [pc, #184]	@ (80017cc <HAL_RCC_OscConfig+0x68c>)
 8001712:	400a      	ands	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fa7b 	bl	8000c10 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff fa76 	bl	8000c10 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e086      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001732:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	049b      	lsls	r3, r3, #18
 800173a:	4013      	ands	r3, r2
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173e:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001742:	220f      	movs	r2, #15
 8001744:	4393      	bics	r3, r2
 8001746:	0019      	movs	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800174e:	430a      	orrs	r2, r1
 8001750:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001752:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <HAL_RCC_OscConfig+0x690>)
 8001758:	4013      	ands	r3, r2
 800175a:	0019      	movs	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001764:	431a      	orrs	r2, r3
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001768:	430a      	orrs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001772:	2180      	movs	r1, #128	@ 0x80
 8001774:	0449      	lsls	r1, r1, #17
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fa49 	bl	8000c10 <HAL_GetTick>
 800177e:	0003      	movs	r3, r0
 8001780:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fa44 	bl	8000c10 <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e054      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	049b      	lsls	r3, r3, #18
 800179e:	4013      	ands	r3, r2
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x644>
 80017a2:	e04c      	b.n	800183e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <HAL_RCC_OscConfig+0x67c>)
 80017aa:	4908      	ldr	r1, [pc, #32]	@ (80017cc <HAL_RCC_OscConfig+0x68c>)
 80017ac:	400a      	ands	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fa2e 	bl	8000c10 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x6a6>
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	40021000 	.word	0x40021000
 80017c0:	00001388 	.word	0x00001388
 80017c4:	efffffff 	.word	0xefffffff
 80017c8:	fffeffff 	.word	0xfffeffff
 80017cc:	feffffff 	.word	0xfeffffff
 80017d0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff fa1c 	bl	8000c10 <HAL_GetTick>
 80017d8:	0002      	movs	r2, r0
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e02c      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_RCC_OscConfig+0x708>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	@ 0x80
 80017ec:	049b      	lsls	r3, r3, #18
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x694>
 80017f2:	e024      	b.n	800183e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e01f      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_RCC_OscConfig+0x708>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <HAL_RCC_OscConfig+0x708>)
 8001808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	23c0      	movs	r3, #192	@ 0xc0
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	401a      	ands	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001818:	429a      	cmp	r2, r3
 800181a:	d10e      	bne.n	800183a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	220f      	movs	r2, #15
 8001820:	401a      	ands	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d107      	bne.n	800183a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	23f0      	movs	r3, #240	@ 0xf0
 800182e:	039b      	lsls	r3, r3, #14
 8001830:	401a      	ands	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b008      	add	sp, #32
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000

0800184c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0bf      	b.n	80019e0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b61      	ldr	r3, [pc, #388]	@ (80019e8 <HAL_RCC_ClockConfig+0x19c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	4013      	ands	r3, r2
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d911      	bls.n	8001892 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b5e      	ldr	r3, [pc, #376]	@ (80019e8 <HAL_RCC_ClockConfig+0x19c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	4393      	bics	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	4b5b      	ldr	r3, [pc, #364]	@ (80019e8 <HAL_RCC_ClockConfig+0x19c>)
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001880:	4b59      	ldr	r3, [pc, #356]	@ (80019e8 <HAL_RCC_ClockConfig+0x19c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d001      	beq.n	8001892 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0a6      	b.n	80019e0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2202      	movs	r2, #2
 8001898:	4013      	ands	r3, r2
 800189a:	d015      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2204      	movs	r2, #4
 80018a2:	4013      	ands	r3, r2
 80018a4:	d006      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018a6:	4b51      	ldr	r3, [pc, #324]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4b50      	ldr	r3, [pc, #320]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 80018ac:	21e0      	movs	r1, #224	@ 0xe0
 80018ae:	00c9      	lsls	r1, r1, #3
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	4b4d      	ldr	r3, [pc, #308]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	22f0      	movs	r2, #240	@ 0xf0
 80018ba:	4393      	bics	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	4b4a      	ldr	r3, [pc, #296]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4013      	ands	r3, r2
 80018d0:	d04c      	beq.n	800196c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	4b44      	ldr	r3, [pc, #272]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	029b      	lsls	r3, r3, #10
 80018e2:	4013      	ands	r3, r2
 80018e4:	d120      	bne.n	8001928 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e07a      	b.n	80019e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	4b3e      	ldr	r3, [pc, #248]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	@ 0x80
 80018f8:	049b      	lsls	r3, r3, #18
 80018fa:	4013      	ands	r3, r2
 80018fc:	d114      	bne.n	8001928 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e06e      	b.n	80019e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800190a:	4b38      	ldr	r3, [pc, #224]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 800190c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800190e:	2380      	movs	r3, #128	@ 0x80
 8001910:	029b      	lsls	r3, r3, #10
 8001912:	4013      	ands	r3, r2
 8001914:	d108      	bne.n	8001928 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e062      	b.n	80019e0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191a:	4b34      	ldr	r3, [pc, #208]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e05b      	b.n	80019e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001928:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2203      	movs	r2, #3
 800192e:	4393      	bics	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800193c:	f7ff f968 	bl	8000c10 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001944:	e009      	b.n	800195a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001946:	f7ff f963 	bl	8000c10 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a27      	ldr	r2, [pc, #156]	@ (80019f0 <HAL_RCC_ClockConfig+0x1a4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e042      	b.n	80019e0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	220c      	movs	r2, #12
 8001960:	401a      	ands	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	429a      	cmp	r2, r3
 800196a:	d1ec      	bne.n	8001946 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <HAL_RCC_ClockConfig+0x19c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	4013      	ands	r3, r2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d211      	bcs.n	800199e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <HAL_RCC_ClockConfig+0x19c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	4393      	bics	r3, r2
 8001982:	0019      	movs	r1, r3
 8001984:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <HAL_RCC_ClockConfig+0x19c>)
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <HAL_RCC_ClockConfig+0x19c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e020      	b.n	80019e0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2204      	movs	r2, #4
 80019a4:	4013      	ands	r3, r2
 80019a6:	d009      	beq.n	80019bc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019a8:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a11      	ldr	r2, [pc, #68]	@ (80019f4 <HAL_RCC_ClockConfig+0x1a8>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 80019b8:	430a      	orrs	r2, r1
 80019ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019bc:	f000 f820 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 80019c0:	0001      	movs	r1, r0
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_RCC_ClockConfig+0x1a0>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	220f      	movs	r2, #15
 80019ca:	4013      	ands	r3, r2
 80019cc:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_RCC_ClockConfig+0x1ac>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	000a      	movs	r2, r1
 80019d2:	40da      	lsrs	r2, r3
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_RCC_ClockConfig+0x1b0>)
 80019d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff f8d3 	bl	8000b84 <HAL_InitTick>
  
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b004      	add	sp, #16
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	00001388 	.word	0x00001388
 80019f4:	fffff8ff 	.word	0xfffff8ff
 80019f8:	0800319c 	.word	0x0800319c
 80019fc:	20000000 	.word	0x20000000

08001a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	220c      	movs	r2, #12
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d046      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>
 8001a2a:	d848      	bhi.n	8001abe <HAL_RCC_GetSysClockFreq+0xbe>
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d002      	beq.n	8001a36 <HAL_RCC_GetSysClockFreq+0x36>
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d003      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x3c>
 8001a34:	e043      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a36:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a38:	613b      	str	r3, [r7, #16]
      break;
 8001a3a:	e043      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	0c9b      	lsrs	r3, r3, #18
 8001a40:	220f      	movs	r2, #15
 8001a42:	4013      	ands	r3, r2
 8001a44:	4a24      	ldr	r2, [pc, #144]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	220f      	movs	r2, #15
 8001a50:	4013      	ands	r3, r2
 8001a52:	4a22      	ldr	r2, [pc, #136]	@ (8001adc <HAL_RCC_GetSysClockFreq+0xdc>)
 8001a54:	5cd3      	ldrb	r3, [r2, r3]
 8001a56:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	23c0      	movs	r3, #192	@ 0xc0
 8001a5c:	025b      	lsls	r3, r3, #9
 8001a5e:	401a      	ands	r2, r3
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	025b      	lsls	r3, r3, #9
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d109      	bne.n	8001a7c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	481a      	ldr	r0, [pc, #104]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a6c:	f7fe fb4c 	bl	8000108 <__udivsi3>
 8001a70:	0003      	movs	r3, r0
 8001a72:	001a      	movs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4353      	muls	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e01a      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	23c0      	movs	r3, #192	@ 0xc0
 8001a80:	025b      	lsls	r3, r3, #9
 8001a82:	401a      	ands	r2, r3
 8001a84:	23c0      	movs	r3, #192	@ 0xc0
 8001a86:	025b      	lsls	r3, r3, #9
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d109      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	4814      	ldr	r0, [pc, #80]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001a90:	f7fe fb3a 	bl	8000108 <__udivsi3>
 8001a94:	0003      	movs	r3, r0
 8001a96:	001a      	movs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4353      	muls	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	480c      	ldr	r0, [pc, #48]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001aa4:	f7fe fb30 	bl	8000108 <__udivsi3>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	001a      	movs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4353      	muls	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	613b      	str	r3, [r7, #16]
      break;
 8001ab6:	e005      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001aba:	613b      	str	r3, [r7, #16]
      break;
 8001abc:	e002      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ac0:	613b      	str	r3, [r7, #16]
      break;
 8001ac2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ac4:	693b      	ldr	r3, [r7, #16]
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b006      	add	sp, #24
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	007a1200 	.word	0x007a1200
 8001ad8:	080031b4 	.word	0x080031b4
 8001adc:	080031c4 	.word	0x080031c4
 8001ae0:	02dc6c00 	.word	0x02dc6c00

08001ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae8:	4b02      	ldr	r3, [pc, #8]	@ (8001af4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	20000000 	.word	0x20000000

08001af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001afc:	f7ff fff2 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b00:	0001      	movs	r1, r0
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	2207      	movs	r2, #7
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	@ (8001b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	40d9      	lsrs	r1, r3
 8001b12:	000b      	movs	r3, r1
}    
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	080031ac 	.word	0x080031ac

08001b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	025b      	lsls	r3, r3, #9
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d100      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001b40:	e08e      	b.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001b42:	2017      	movs	r0, #23
 8001b44:	183b      	adds	r3, r7, r0
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	2380      	movs	r3, #128	@ 0x80
 8001b50:	055b      	lsls	r3, r3, #21
 8001b52:	4013      	ands	r3, r2
 8001b54:	d110      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b6b      	ldr	r3, [pc, #428]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b5c:	2180      	movs	r1, #128	@ 0x80
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	430a      	orrs	r2, r1
 8001b62:	61da      	str	r2, [r3, #28]
 8001b64:	4b67      	ldr	r3, [pc, #412]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	055b      	lsls	r3, r3, #21
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4b63      	ldr	r3, [pc, #396]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4013      	ands	r3, r2
 8001b82:	d11a      	bne.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b84:	4b60      	ldr	r3, [pc, #384]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b5f      	ldr	r3, [pc, #380]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b8a:	2180      	movs	r1, #128	@ 0x80
 8001b8c:	0049      	lsls	r1, r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b92:	f7ff f83d 	bl	8000c10 <HAL_GetTick>
 8001b96:	0003      	movs	r3, r0
 8001b98:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	e008      	b.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9c:	f7ff f838 	bl	8000c10 <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	@ 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0a6      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	4b56      	ldr	r3, [pc, #344]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bba:	4b52      	ldr	r3, [pc, #328]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bbc:	6a1a      	ldr	r2, [r3, #32]
 8001bbe:	23c0      	movs	r3, #192	@ 0xc0
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d034      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	23c0      	movs	r3, #192	@ 0xc0
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d02c      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bdc:	4b49      	ldr	r3, [pc, #292]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a4a      	ldr	r2, [pc, #296]	@ (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001be6:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001be8:	6a1a      	ldr	r2, [r3, #32]
 8001bea:	4b46      	ldr	r3, [pc, #280]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bec:	2180      	movs	r1, #128	@ 0x80
 8001bee:	0249      	lsls	r1, r1, #9
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bf4:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bf6:	6a1a      	ldr	r2, [r3, #32]
 8001bf8:	4b42      	ldr	r3, [pc, #264]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfa:	4945      	ldr	r1, [pc, #276]	@ (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c00:	4b40      	ldr	r3, [pc, #256]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7fe ffff 	bl	8000c10 <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	e009      	b.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7fe fffa 	bl	8000c10 <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	4a3c      	ldr	r2, [pc, #240]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e067      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	4b35      	ldr	r3, [pc, #212]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	2202      	movs	r2, #2
 8001c32:	4013      	ands	r3, r2
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c36:	4b33      	ldr	r3, [pc, #204]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4a34      	ldr	r2, [pc, #208]	@ (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4b2f      	ldr	r3, [pc, #188]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c46:	430a      	orrs	r2, r1
 8001c48:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c4a:	2317      	movs	r3, #23
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c54:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c5a:	492f      	ldr	r1, [pc, #188]	@ (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c6a:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	2203      	movs	r2, #3
 8001c70:	4393      	bics	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2202      	movs	r2, #2
 8001c84:	4013      	ands	r3, r2
 8001c86:	d009      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c88:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	4a23      	ldr	r2, [pc, #140]	@ (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ca6:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	2210      	movs	r2, #16
 8001cac:	4393      	bics	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	@ 0x80
 8001cc0:	029b      	lsls	r3, r3, #10
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d009      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	4393      	bics	r3, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	2240      	movs	r2, #64	@ 0x40
 8001cec:	4393      	bics	r3, r2
 8001cee:	0019      	movs	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b006      	add	sp, #24
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	fffffcff 	.word	0xfffffcff
 8001d10:	fffeffff 	.word	0xfffeffff
 8001d14:	00001388 	.word	0x00001388
 8001d18:	efffffff 	.word	0xefffffff
 8001d1c:	fffcffff 	.word	0xfffcffff

08001d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e042      	b.n	8001db8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	223d      	movs	r2, #61	@ 0x3d
 8001d36:	5c9b      	ldrb	r3, [r3, r2]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d107      	bne.n	8001d4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	223c      	movs	r2, #60	@ 0x3c
 8001d42:	2100      	movs	r1, #0
 8001d44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7fe fcf5 	bl	8000738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	223d      	movs	r2, #61	@ 0x3d
 8001d52:	2102      	movs	r1, #2
 8001d54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	0019      	movs	r1, r3
 8001d60:	0010      	movs	r0, r2
 8001d62:	f000 fb09 	bl	8002378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2246      	movs	r2, #70	@ 0x46
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	223e      	movs	r2, #62	@ 0x3e
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	223f      	movs	r2, #63	@ 0x3f
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2240      	movs	r2, #64	@ 0x40
 8001d82:	2101      	movs	r1, #1
 8001d84:	5499      	strb	r1, [r3, r2]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2241      	movs	r2, #65	@ 0x41
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2242      	movs	r2, #66	@ 0x42
 8001d92:	2101      	movs	r1, #1
 8001d94:	5499      	strb	r1, [r3, r2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2243      	movs	r2, #67	@ 0x43
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	5499      	strb	r1, [r3, r2]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2244      	movs	r2, #68	@ 0x44
 8001da2:	2101      	movs	r1, #1
 8001da4:	5499      	strb	r1, [r3, r2]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2245      	movs	r2, #69	@ 0x45
 8001daa:	2101      	movs	r1, #1
 8001dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	223d      	movs	r2, #61	@ 0x3d
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	223d      	movs	r2, #61	@ 0x3d
 8001dcc:	5c9b      	ldrb	r3, [r3, r2]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d001      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e03b      	b.n	8001e50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	223d      	movs	r2, #61	@ 0x3d
 8001ddc:	2102      	movs	r1, #2
 8001dde:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2101      	movs	r1, #1
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a18      	ldr	r2, [pc, #96]	@ (8001e58 <HAL_TIM_Base_Start_IT+0x98>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00f      	beq.n	8001e1a <HAL_TIM_Base_Start_IT+0x5a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	05db      	lsls	r3, r3, #23
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d009      	beq.n	8001e1a <HAL_TIM_Base_Start_IT+0x5a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <HAL_TIM_Base_Start_IT+0x9c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d004      	beq.n	8001e1a <HAL_TIM_Base_Start_IT+0x5a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d111      	bne.n	8001e3e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2207      	movs	r2, #7
 8001e22:	4013      	ands	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b06      	cmp	r3, #6
 8001e2a:	d010      	beq.n	8001e4e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2101      	movs	r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3c:	e007      	b.n	8001e4e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40012c00 	.word	0x40012c00
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40014000 	.word	0x40014000

08001e64 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e042      	b.n	8001efe <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	223d      	movs	r2, #61	@ 0x3d
 8001e7c:	5c9b      	ldrb	r3, [r3, r2]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	223c      	movs	r2, #60	@ 0x3c
 8001e88:	2100      	movs	r1, #0
 8001e8a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f000 f839 	bl	8001f06 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	223d      	movs	r2, #61	@ 0x3d
 8001e98:	2102      	movs	r1, #2
 8001e9a:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	f000 fa66 	bl	8002378 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2108      	movs	r1, #8
 8001eb8:	438a      	bics	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2246      	movs	r2, #70	@ 0x46
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	223e      	movs	r2, #62	@ 0x3e
 8001ed8:	2101      	movs	r1, #1
 8001eda:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	223f      	movs	r2, #63	@ 0x3f
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2242      	movs	r2, #66	@ 0x42
 8001ee8:	2101      	movs	r1, #1
 8001eea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2243      	movs	r2, #67	@ 0x43
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	223d      	movs	r2, #61	@ 0x3d
 8001ef8:	2101      	movs	r1, #1
 8001efa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	0018      	movs	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b002      	add	sp, #8
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b002      	add	sp, #8
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2202      	movs	r2, #2
 8001f32:	4013      	ands	r3, r2
 8001f34:	d021      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d01d      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2203      	movs	r2, #3
 8001f44:	4252      	negs	r2, r2
 8001f46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2203      	movs	r2, #3
 8001f56:	4013      	ands	r3, r2
 8001f58:	d004      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 f9f3 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8001f62:	e007      	b.n	8001f74 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 f9e6 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 f9f2 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d022      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2204      	movs	r2, #4
 8001f86:	4013      	ands	r3, r2
 8001f88:	d01e      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2205      	movs	r2, #5
 8001f90:	4252      	negs	r2, r2
 8001f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	23c0      	movs	r3, #192	@ 0xc0
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	0018      	movs	r0, r3
 8001fac:	f000 f9cc 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e007      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 f9bf 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 f9cb 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2208      	movs	r2, #8
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d021      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d01d      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2209      	movs	r2, #9
 8001fde:	4252      	negs	r2, r2
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 f9a6 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e007      	b.n	800200e <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f000 f999 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0018      	movs	r0, r3
 800200a:	f000 f9a5 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2210      	movs	r2, #16
 8002018:	4013      	ands	r3, r2
 800201a:	d022      	beq.n	8002062 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2210      	movs	r2, #16
 8002020:	4013      	ands	r3, r2
 8002022:	d01e      	beq.n	8002062 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2211      	movs	r2, #17
 800202a:	4252      	negs	r2, r2
 800202c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2208      	movs	r2, #8
 8002032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	23c0      	movs	r3, #192	@ 0xc0
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4013      	ands	r3, r2
 8002040:	d004      	beq.n	800204c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 f97f 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 800204a:	e007      	b.n	800205c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f972 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	0018      	movs	r0, r3
 8002058:	f000 f97e 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2201      	movs	r2, #1
 8002066:	4013      	ands	r3, r2
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	d008      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2202      	movs	r2, #2
 8002078:	4252      	negs	r2, r2
 800207a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	0018      	movs	r0, r3
 8002080:	f000 f952 	bl	8002328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2280      	movs	r2, #128	@ 0x80
 8002088:	4013      	ands	r3, r2
 800208a:	d00c      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2280      	movs	r2, #128	@ 0x80
 8002090:	4013      	ands	r3, r2
 8002092:	d008      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2281      	movs	r2, #129	@ 0x81
 800209a:	4252      	negs	r2, r2
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f000 fb89 	bl	80027b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2240      	movs	r2, #64	@ 0x40
 80020aa:	4013      	ands	r3, r2
 80020ac:	d00c      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2240      	movs	r2, #64	@ 0x40
 80020b2:	4013      	ands	r3, r2
 80020b4:	d008      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2241      	movs	r2, #65	@ 0x41
 80020bc:	4252      	negs	r2, r2
 80020be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 f950 	bl	8002368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2220      	movs	r2, #32
 80020cc:	4013      	ands	r3, r2
 80020ce:	d00c      	beq.n	80020ea <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	4013      	ands	r3, r2
 80020d6:	d008      	beq.n	80020ea <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2221      	movs	r2, #33	@ 0x21
 80020de:	4252      	negs	r2, r2
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fb5f 	bl	80027a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ea:	46c0      	nop			@ (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b004      	add	sp, #16
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020fe:	230f      	movs	r3, #15
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	223c      	movs	r2, #60	@ 0x3c
 800210a:	5c9b      	ldrb	r3, [r3, r2]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_TIM_ConfigClockSource+0x20>
 8002110:	2302      	movs	r3, #2
 8002112:	e0bc      	b.n	800228e <HAL_TIM_ConfigClockSource+0x19a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	223c      	movs	r2, #60	@ 0x3c
 8002118:	2101      	movs	r1, #1
 800211a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	223d      	movs	r2, #61	@ 0x3d
 8002120:	2102      	movs	r1, #2
 8002122:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2277      	movs	r2, #119	@ 0x77
 8002130:	4393      	bics	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4a58      	ldr	r2, [pc, #352]	@ (8002298 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2280      	movs	r2, #128	@ 0x80
 800214a:	0192      	lsls	r2, r2, #6
 800214c:	4293      	cmp	r3, r2
 800214e:	d040      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0xde>
 8002150:	2280      	movs	r2, #128	@ 0x80
 8002152:	0192      	lsls	r2, r2, #6
 8002154:	4293      	cmp	r3, r2
 8002156:	d900      	bls.n	800215a <HAL_TIM_ConfigClockSource+0x66>
 8002158:	e088      	b.n	800226c <HAL_TIM_ConfigClockSource+0x178>
 800215a:	2280      	movs	r2, #128	@ 0x80
 800215c:	0152      	lsls	r2, r2, #5
 800215e:	4293      	cmp	r3, r2
 8002160:	d100      	bne.n	8002164 <HAL_TIM_ConfigClockSource+0x70>
 8002162:	e088      	b.n	8002276 <HAL_TIM_ConfigClockSource+0x182>
 8002164:	2280      	movs	r2, #128	@ 0x80
 8002166:	0152      	lsls	r2, r2, #5
 8002168:	4293      	cmp	r3, r2
 800216a:	d900      	bls.n	800216e <HAL_TIM_ConfigClockSource+0x7a>
 800216c:	e07e      	b.n	800226c <HAL_TIM_ConfigClockSource+0x178>
 800216e:	2b70      	cmp	r3, #112	@ 0x70
 8002170:	d018      	beq.n	80021a4 <HAL_TIM_ConfigClockSource+0xb0>
 8002172:	d900      	bls.n	8002176 <HAL_TIM_ConfigClockSource+0x82>
 8002174:	e07a      	b.n	800226c <HAL_TIM_ConfigClockSource+0x178>
 8002176:	2b60      	cmp	r3, #96	@ 0x60
 8002178:	d04f      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x126>
 800217a:	d900      	bls.n	800217e <HAL_TIM_ConfigClockSource+0x8a>
 800217c:	e076      	b.n	800226c <HAL_TIM_ConfigClockSource+0x178>
 800217e:	2b50      	cmp	r3, #80	@ 0x50
 8002180:	d03b      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0x106>
 8002182:	d900      	bls.n	8002186 <HAL_TIM_ConfigClockSource+0x92>
 8002184:	e072      	b.n	800226c <HAL_TIM_ConfigClockSource+0x178>
 8002186:	2b40      	cmp	r3, #64	@ 0x40
 8002188:	d057      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x146>
 800218a:	d900      	bls.n	800218e <HAL_TIM_ConfigClockSource+0x9a>
 800218c:	e06e      	b.n	800226c <HAL_TIM_ConfigClockSource+0x178>
 800218e:	2b30      	cmp	r3, #48	@ 0x30
 8002190:	d063      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x166>
 8002192:	d86b      	bhi.n	800226c <HAL_TIM_ConfigClockSource+0x178>
 8002194:	2b20      	cmp	r3, #32
 8002196:	d060      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x166>
 8002198:	d868      	bhi.n	800226c <HAL_TIM_ConfigClockSource+0x178>
 800219a:	2b00      	cmp	r3, #0
 800219c:	d05d      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x166>
 800219e:	2b10      	cmp	r3, #16
 80021a0:	d05b      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x166>
 80021a2:	e063      	b.n	800226c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021b4:	f000 fa7a 	bl	80026ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2277      	movs	r2, #119	@ 0x77
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	609a      	str	r2, [r3, #8]
      break;
 80021d0:	e052      	b.n	8002278 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021e2:	f000 fa63 	bl	80026ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2180      	movs	r1, #128	@ 0x80
 80021f2:	01c9      	lsls	r1, r1, #7
 80021f4:	430a      	orrs	r2, r1
 80021f6:	609a      	str	r2, [r3, #8]
      break;
 80021f8:	e03e      	b.n	8002278 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002206:	001a      	movs	r2, r3
 8002208:	f000 f9d6 	bl	80025b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2150      	movs	r1, #80	@ 0x50
 8002212:	0018      	movs	r0, r3
 8002214:	f000 fa30 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 8002218:	e02e      	b.n	8002278 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002226:	001a      	movs	r2, r3
 8002228:	f000 f9f4 	bl	8002614 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2160      	movs	r1, #96	@ 0x60
 8002232:	0018      	movs	r0, r3
 8002234:	f000 fa20 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 8002238:	e01e      	b.n	8002278 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002246:	001a      	movs	r2, r3
 8002248:	f000 f9b6 	bl	80025b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2140      	movs	r1, #64	@ 0x40
 8002252:	0018      	movs	r0, r3
 8002254:	f000 fa10 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 8002258:	e00e      	b.n	8002278 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0019      	movs	r1, r3
 8002264:	0010      	movs	r0, r2
 8002266:	f000 fa07 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 800226a:	e005      	b.n	8002278 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800226c:	230f      	movs	r3, #15
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
      break;
 8002274:	e000      	b.n	8002278 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002276:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	223d      	movs	r2, #61	@ 0x3d
 800227c:	2101      	movs	r1, #1
 800227e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	223c      	movs	r2, #60	@ 0x3c
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]

  return status;
 8002288:	230f      	movs	r3, #15
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	781b      	ldrb	r3, [r3, #0]
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	b004      	add	sp, #16
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	ffff00ff 	.word	0xffff00ff

0800229c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223c      	movs	r2, #60	@ 0x3c
 80022aa:	5c9b      	ldrb	r3, [r3, r2]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e032      	b.n	800231a <HAL_TIM_SlaveConfigSynchro+0x7e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	223c      	movs	r2, #60	@ 0x3c
 80022b8:	2101      	movs	r1, #1
 80022ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	223d      	movs	r2, #61	@ 0x3d
 80022c0:	2102      	movs	r1, #2
 80022c2:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0011      	movs	r1, r2
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 f8e2 	bl	8002494 <TIM_SlaveTimer_SetConfig>
 80022d0:	1e03      	subs	r3, r0, #0
 80022d2:	d009      	beq.n	80022e8 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	223d      	movs	r2, #61	@ 0x3d
 80022d8:	2101      	movs	r1, #1
 80022da:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	223c      	movs	r2, #60	@ 0x3c
 80022e0:	2100      	movs	r1, #0
 80022e2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e018      	b.n	800231a <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2140      	movs	r1, #64	@ 0x40
 80022f4:	438a      	bics	r2, r1
 80022f6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4908      	ldr	r1, [pc, #32]	@ (8002324 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8002304:	400a      	ands	r2, r1
 8002306:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223d      	movs	r2, #61	@ 0x3d
 800230c:	2101      	movs	r1, #1
 800230e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	223c      	movs	r2, #60	@ 0x3c
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	ffffbfff 	.word	0xffffbfff

08002328 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002330:	46c0      	nop			@ (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002340:	46c0      	nop			@ (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002350:	46c0      	nop			@ (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002360:	46c0      	nop			@ (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002370:	46c0      	nop			@ (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b002      	add	sp, #8
 8002376:	bd80      	pop	{r7, pc}

08002378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3b      	ldr	r2, [pc, #236]	@ (8002478 <TIM_Base_SetConfig+0x100>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d008      	beq.n	80023a2 <TIM_Base_SetConfig+0x2a>
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	05db      	lsls	r3, r3, #23
 8002396:	429a      	cmp	r2, r3
 8002398:	d003      	beq.n	80023a2 <TIM_Base_SetConfig+0x2a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a37      	ldr	r2, [pc, #220]	@ (800247c <TIM_Base_SetConfig+0x104>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d108      	bne.n	80023b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2270      	movs	r2, #112	@ 0x70
 80023a6:	4393      	bics	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a30      	ldr	r2, [pc, #192]	@ (8002478 <TIM_Base_SetConfig+0x100>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d018      	beq.n	80023ee <TIM_Base_SetConfig+0x76>
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	2380      	movs	r3, #128	@ 0x80
 80023c0:	05db      	lsls	r3, r3, #23
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d013      	beq.n	80023ee <TIM_Base_SetConfig+0x76>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a2c      	ldr	r2, [pc, #176]	@ (800247c <TIM_Base_SetConfig+0x104>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00f      	beq.n	80023ee <TIM_Base_SetConfig+0x76>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002480 <TIM_Base_SetConfig+0x108>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00b      	beq.n	80023ee <TIM_Base_SetConfig+0x76>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <TIM_Base_SetConfig+0x10c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <TIM_Base_SetConfig+0x76>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a29      	ldr	r2, [pc, #164]	@ (8002488 <TIM_Base_SetConfig+0x110>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d003      	beq.n	80023ee <TIM_Base_SetConfig+0x76>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a28      	ldr	r2, [pc, #160]	@ (800248c <TIM_Base_SetConfig+0x114>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d108      	bne.n	8002400 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4a27      	ldr	r2, [pc, #156]	@ (8002490 <TIM_Base_SetConfig+0x118>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2280      	movs	r2, #128	@ 0x80
 8002404:	4393      	bics	r3, r2
 8002406:	001a      	movs	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a13      	ldr	r2, [pc, #76]	@ (8002478 <TIM_Base_SetConfig+0x100>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00b      	beq.n	8002446 <TIM_Base_SetConfig+0xce>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <TIM_Base_SetConfig+0x10c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <TIM_Base_SetConfig+0xce>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a13      	ldr	r2, [pc, #76]	@ (8002488 <TIM_Base_SetConfig+0x110>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d003      	beq.n	8002446 <TIM_Base_SetConfig+0xce>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a12      	ldr	r2, [pc, #72]	@ (800248c <TIM_Base_SetConfig+0x114>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d103      	bne.n	800244e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2201      	movs	r2, #1
 8002466:	4393      	bics	r3, r2
 8002468:	001a      	movs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]
  }
}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400
 8002480:	40002000 	.word	0x40002000
 8002484:	40014000 	.word	0x40014000
 8002488:	40014400 	.word	0x40014400
 800248c:	40014800 	.word	0x40014800
 8002490:	fffffcff 	.word	0xfffffcff

08002494 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249e:	2317      	movs	r3, #23
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2270      	movs	r2, #112	@ 0x70
 80024b2:	4393      	bics	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2207      	movs	r2, #7
 80024c4:	4393      	bics	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b70      	cmp	r3, #112	@ 0x70
 80024e0:	d015      	beq.n	800250e <TIM_SlaveTimer_SetConfig+0x7a>
 80024e2:	d900      	bls.n	80024e6 <TIM_SlaveTimer_SetConfig+0x52>
 80024e4:	e05b      	b.n	800259e <TIM_SlaveTimer_SetConfig+0x10a>
 80024e6:	2b60      	cmp	r3, #96	@ 0x60
 80024e8:	d04f      	beq.n	800258a <TIM_SlaveTimer_SetConfig+0xf6>
 80024ea:	d858      	bhi.n	800259e <TIM_SlaveTimer_SetConfig+0x10a>
 80024ec:	2b50      	cmp	r3, #80	@ 0x50
 80024ee:	d042      	beq.n	8002576 <TIM_SlaveTimer_SetConfig+0xe2>
 80024f0:	d855      	bhi.n	800259e <TIM_SlaveTimer_SetConfig+0x10a>
 80024f2:	2b40      	cmp	r3, #64	@ 0x40
 80024f4:	d016      	beq.n	8002524 <TIM_SlaveTimer_SetConfig+0x90>
 80024f6:	d852      	bhi.n	800259e <TIM_SlaveTimer_SetConfig+0x10a>
 80024f8:	2b30      	cmp	r3, #48	@ 0x30
 80024fa:	d055      	beq.n	80025a8 <TIM_SlaveTimer_SetConfig+0x114>
 80024fc:	d84f      	bhi.n	800259e <TIM_SlaveTimer_SetConfig+0x10a>
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d052      	beq.n	80025a8 <TIM_SlaveTimer_SetConfig+0x114>
 8002502:	d84c      	bhi.n	800259e <TIM_SlaveTimer_SetConfig+0x10a>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d04f      	beq.n	80025a8 <TIM_SlaveTimer_SetConfig+0x114>
 8002508:	2b10      	cmp	r3, #16
 800250a:	d04d      	beq.n	80025a8 <TIM_SlaveTimer_SetConfig+0x114>
 800250c:	e047      	b.n	800259e <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800251e:	f000 f8c5 	bl	80026ac <TIM_ETR_SetConfig>
      break;
 8002522:	e042      	b.n	80025aa <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d101      	bne.n	8002530 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e03f      	b.n	80025b0 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	438a      	bics	r2, r1
 8002546:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	22f0      	movs	r2, #240	@ 0xf0
 8002554:	4393      	bics	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4313      	orrs	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	621a      	str	r2, [r3, #32]
      break;
 8002574:	e019      	b.n	80025aa <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002582:	001a      	movs	r2, r3
 8002584:	f000 f818 	bl	80025b8 <TIM_TI1_ConfigInputStage>
      break;
 8002588:	e00f      	b.n	80025aa <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002596:	001a      	movs	r2, r3
 8002598:	f000 f83c 	bl	8002614 <TIM_TI2_ConfigInputStage>
      break;
 800259c:	e005      	b.n	80025aa <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800259e:	2317      	movs	r3, #23
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
      break;
 80025a6:	e000      	b.n	80025aa <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80025a8:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80025aa:	2317      	movs	r3, #23
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	781b      	ldrb	r3, [r3, #0]
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b006      	add	sp, #24
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4393      	bics	r3, r2
 80025d2:	001a      	movs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	22f0      	movs	r2, #240	@ 0xf0
 80025e2:	4393      	bics	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	220a      	movs	r2, #10
 80025f4:	4393      	bics	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	621a      	str	r2, [r3, #32]
}
 800260c:	46c0      	nop			@ (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b006      	add	sp, #24
 8002612:	bd80      	pop	{r7, pc}

08002614 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	2210      	movs	r2, #16
 800262c:	4393      	bics	r3, r2
 800262e:	001a      	movs	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <TIM_TI2_ConfigInputStage+0x60>)
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	031b      	lsls	r3, r3, #12
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	22a0      	movs	r2, #160	@ 0xa0
 8002650:	4393      	bics	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	621a      	str	r2, [r3, #32]
}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b006      	add	sp, #24
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	ffff0fff 	.word	0xffff0fff

08002678 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2270      	movs	r2, #112	@ 0x70
 800268c:	4393      	bics	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	2207      	movs	r2, #7
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	609a      	str	r2, [r3, #8]
}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b004      	add	sp, #16
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <TIM_ETR_SetConfig+0x3c>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	021a      	lsls	r2, r3, #8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	46c0      	nop			@ (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b006      	add	sp, #24
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	ffff00ff 	.word	0xffff00ff

080026ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223c      	movs	r2, #60	@ 0x3c
 80026fa:	5c9b      	ldrb	r3, [r3, r2]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002700:	2302      	movs	r3, #2
 8002702:	e047      	b.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	223c      	movs	r2, #60	@ 0x3c
 8002708:	2101      	movs	r1, #1
 800270a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	223d      	movs	r2, #61	@ 0x3d
 8002710:	2102      	movs	r1, #2
 8002712:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2270      	movs	r2, #112	@ 0x70
 8002728:	4393      	bics	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a16      	ldr	r2, [pc, #88]	@ (800279c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00f      	beq.n	8002768 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	@ 0x80
 800274e:	05db      	lsls	r3, r3, #23
 8002750:	429a      	cmp	r2, r3
 8002752:	d009      	beq.n	8002768 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a10      	ldr	r2, [pc, #64]	@ (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d10c      	bne.n	8002782 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2280      	movs	r2, #128	@ 0x80
 800276c:	4393      	bics	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	4313      	orrs	r3, r2
 8002778:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	223d      	movs	r2, #61	@ 0x3d
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	223c      	movs	r2, #60	@ 0x3c
 800278e:	2100      	movs	r1, #0
 8002790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b004      	add	sp, #16
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40014000 	.word	0x40014000

080027a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027b0:	46c0      	nop			@ (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027c0:	46c0      	nop			@ (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e074      	b.n	80028c4 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	223c      	movs	r2, #60	@ 0x3c
 80027de:	5c9b      	ldrb	r3, [r3, r2]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	223d      	movs	r2, #61	@ 0x3d
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fe f84b 	bl	800088c <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	223c      	movs	r2, #60	@ 0x3c
 80027fa:	2102      	movs	r1, #2
 80027fc:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6819      	ldr	r1, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002814:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800281c:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002822:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002828:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800282e:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 8002834:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 800283a:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7b1b      	ldrb	r3, [r3, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d108      	bne.n	800285e <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2180      	movs	r1, #128	@ 0x80
 8002858:	0249      	lsls	r1, r1, #9
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	43d2      	mvns	r2, r2
 8002874:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800288e:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681c      	ldr	r4, [r3, #0]
 8002898:	0010      	movs	r0, r2
 800289a:	f000 f817 	bl	80028cc <TSC_extract_groups>
 800289e:	0003      	movs	r3, r0
 80028a0:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2103      	movs	r1, #3
 80028ae:	438a      	bics	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2203      	movs	r2, #3
 80028b8:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	223c      	movs	r2, #60	@ 0x3c
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b003      	add	sp, #12
 80028ca:	bd90      	pop	{r4, r7, pc}

080028cc <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	e011      	b.n	8002902 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	220f      	movs	r2, #15
 80028e4:	409a      	lsls	r2, r3
 80028e6:	0013      	movs	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4013      	ands	r3, r2
 80028ec:	d006      	beq.n	80028fc <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 80028ee:	2201      	movs	r2, #1
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	409a      	lsls	r2, r3
 80028f4:	0013      	movs	r3, r2
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3301      	adds	r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b07      	cmp	r3, #7
 8002906:	d9ea      	bls.n	80028de <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002908:	68fb      	ldr	r3, [r7, #12]
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e044      	b.n	80029b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d107      	bne.n	800293e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2278      	movs	r2, #120	@ 0x78
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f7fe f899 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2224      	movs	r2, #36	@ 0x24
 8002942:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2101      	movs	r1, #1
 8002950:	438a      	bics	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 f9b4 	bl	8002ccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f000 f828 	bl	80029bc <UART_SetConfig>
 800296c:	0003      	movs	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e01c      	b.n	80029b0 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	490d      	ldr	r1, [pc, #52]	@ (80029b8 <HAL_UART_Init+0xa4>)
 8002982:	400a      	ands	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	212a      	movs	r1, #42	@ 0x2a
 8002992:	438a      	bics	r2, r1
 8002994:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2101      	movs	r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 fa43 	bl	8002e34 <UART_CheckIdleState>
 80029ae:	0003      	movs	r3, r0
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	ffffb7ff 	.word	0xffffb7ff

080029bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029c4:	231e      	movs	r3, #30
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4aaf      	ldr	r2, [pc, #700]	@ (8002ca8 <UART_SetConfig+0x2ec>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4aaa      	ldr	r2, [pc, #680]	@ (8002cac <UART_SetConfig+0x2f0>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4aa1      	ldr	r2, [pc, #644]	@ (8002cb0 <UART_SetConfig+0x2f4>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a9d      	ldr	r2, [pc, #628]	@ (8002cb4 <UART_SetConfig+0x2f8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d127      	bne.n	8002a92 <UART_SetConfig+0xd6>
 8002a42:	4b9d      	ldr	r3, [pc, #628]	@ (8002cb8 <UART_SetConfig+0x2fc>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	2203      	movs	r2, #3
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d00d      	beq.n	8002a6a <UART_SetConfig+0xae>
 8002a4e:	d81b      	bhi.n	8002a88 <UART_SetConfig+0xcc>
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d014      	beq.n	8002a7e <UART_SetConfig+0xc2>
 8002a54:	d818      	bhi.n	8002a88 <UART_SetConfig+0xcc>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <UART_SetConfig+0xa4>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d00a      	beq.n	8002a74 <UART_SetConfig+0xb8>
 8002a5e:	e013      	b.n	8002a88 <UART_SetConfig+0xcc>
 8002a60:	231f      	movs	r3, #31
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e065      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002a6a:	231f      	movs	r3, #31
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2202      	movs	r2, #2
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e060      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002a74:	231f      	movs	r3, #31
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2204      	movs	r2, #4
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e05b      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002a7e:	231f      	movs	r3, #31
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	2208      	movs	r2, #8
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e056      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002a88:	231f      	movs	r3, #31
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e051      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a89      	ldr	r2, [pc, #548]	@ (8002cbc <UART_SetConfig+0x300>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d134      	bne.n	8002b06 <UART_SetConfig+0x14a>
 8002a9c:	4b86      	ldr	r3, [pc, #536]	@ (8002cb8 <UART_SetConfig+0x2fc>)
 8002a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa0:	23c0      	movs	r3, #192	@ 0xc0
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	22c0      	movs	r2, #192	@ 0xc0
 8002aa8:	0292      	lsls	r2, r2, #10
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d017      	beq.n	8002ade <UART_SetConfig+0x122>
 8002aae:	22c0      	movs	r2, #192	@ 0xc0
 8002ab0:	0292      	lsls	r2, r2, #10
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d822      	bhi.n	8002afc <UART_SetConfig+0x140>
 8002ab6:	2280      	movs	r2, #128	@ 0x80
 8002ab8:	0292      	lsls	r2, r2, #10
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <UART_SetConfig+0x136>
 8002abe:	2280      	movs	r2, #128	@ 0x80
 8002ac0:	0292      	lsls	r2, r2, #10
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d81a      	bhi.n	8002afc <UART_SetConfig+0x140>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <UART_SetConfig+0x118>
 8002aca:	2280      	movs	r2, #128	@ 0x80
 8002acc:	0252      	lsls	r2, r2, #9
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00a      	beq.n	8002ae8 <UART_SetConfig+0x12c>
 8002ad2:	e013      	b.n	8002afc <UART_SetConfig+0x140>
 8002ad4:	231f      	movs	r3, #31
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e02b      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002ade:	231f      	movs	r3, #31
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e026      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002ae8:	231f      	movs	r3, #31
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2204      	movs	r2, #4
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e021      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002af2:	231f      	movs	r3, #31
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2208      	movs	r2, #8
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e01c      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002afc:	231f      	movs	r3, #31
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2210      	movs	r2, #16
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e017      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6d      	ldr	r2, [pc, #436]	@ (8002cc0 <UART_SetConfig+0x304>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d104      	bne.n	8002b1a <UART_SetConfig+0x15e>
 8002b10:	231f      	movs	r3, #31
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e00d      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a69      	ldr	r2, [pc, #420]	@ (8002cc4 <UART_SetConfig+0x308>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d104      	bne.n	8002b2e <UART_SetConfig+0x172>
 8002b24:	231f      	movs	r3, #31
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e003      	b.n	8002b36 <UART_SetConfig+0x17a>
 8002b2e:	231f      	movs	r3, #31
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	2210      	movs	r2, #16
 8002b34:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d15c      	bne.n	8002bfc <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8002b42:	231f      	movs	r3, #31
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d015      	beq.n	8002b78 <UART_SetConfig+0x1bc>
 8002b4c:	dc18      	bgt.n	8002b80 <UART_SetConfig+0x1c4>
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d00d      	beq.n	8002b6e <UART_SetConfig+0x1b2>
 8002b52:	dc15      	bgt.n	8002b80 <UART_SetConfig+0x1c4>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <UART_SetConfig+0x1a2>
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d005      	beq.n	8002b68 <UART_SetConfig+0x1ac>
 8002b5c:	e010      	b.n	8002b80 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b5e:	f7fe ffcb 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8002b62:	0003      	movs	r3, r0
 8002b64:	61bb      	str	r3, [r7, #24]
        break;
 8002b66:	e012      	b.n	8002b8e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b68:	4b57      	ldr	r3, [pc, #348]	@ (8002cc8 <UART_SetConfig+0x30c>)
 8002b6a:	61bb      	str	r3, [r7, #24]
        break;
 8002b6c:	e00f      	b.n	8002b8e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6e:	f7fe ff47 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8002b72:	0003      	movs	r3, r0
 8002b74:	61bb      	str	r3, [r7, #24]
        break;
 8002b76:	e00a      	b.n	8002b8e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	61bb      	str	r3, [r7, #24]
        break;
 8002b7e:	e006      	b.n	8002b8e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b84:	231e      	movs	r3, #30
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
        break;
 8002b8c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d100      	bne.n	8002b96 <UART_SetConfig+0x1da>
 8002b94:	e07a      	b.n	8002c8c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	005a      	lsls	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	18d2      	adds	r2, r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	0010      	movs	r0, r2
 8002baa:	f7fd faad 	bl	8000108 <__udivsi3>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d91c      	bls.n	8002bf2 <UART_SetConfig+0x236>
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	025b      	lsls	r3, r3, #9
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d217      	bcs.n	8002bf2 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	200e      	movs	r0, #14
 8002bc8:	183b      	adds	r3, r7, r0
 8002bca:	210f      	movs	r1, #15
 8002bcc:	438a      	bics	r2, r1
 8002bce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	4013      	ands	r3, r2
 8002bda:	b299      	uxth	r1, r3
 8002bdc:	183b      	adds	r3, r7, r0
 8002bde:	183a      	adds	r2, r7, r0
 8002be0:	8812      	ldrh	r2, [r2, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	183a      	adds	r2, r7, r0
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	e04c      	b.n	8002c8c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002bf2:	231e      	movs	r3, #30
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e047      	b.n	8002c8c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bfc:	231f      	movs	r3, #31
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d015      	beq.n	8002c32 <UART_SetConfig+0x276>
 8002c06:	dc18      	bgt.n	8002c3a <UART_SetConfig+0x27e>
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d00d      	beq.n	8002c28 <UART_SetConfig+0x26c>
 8002c0c:	dc15      	bgt.n	8002c3a <UART_SetConfig+0x27e>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <UART_SetConfig+0x25c>
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d005      	beq.n	8002c22 <UART_SetConfig+0x266>
 8002c16:	e010      	b.n	8002c3a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c18:	f7fe ff6e 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	61bb      	str	r3, [r7, #24]
        break;
 8002c20:	e012      	b.n	8002c48 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c22:	4b29      	ldr	r3, [pc, #164]	@ (8002cc8 <UART_SetConfig+0x30c>)
 8002c24:	61bb      	str	r3, [r7, #24]
        break;
 8002c26:	e00f      	b.n	8002c48 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c28:	f7fe feea 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	61bb      	str	r3, [r7, #24]
        break;
 8002c30:	e00a      	b.n	8002c48 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	61bb      	str	r3, [r7, #24]
        break;
 8002c38:	e006      	b.n	8002c48 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c3e:	231e      	movs	r3, #30
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
        break;
 8002c46:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01e      	beq.n	8002c8c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	085a      	lsrs	r2, r3, #1
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	18d2      	adds	r2, r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	0010      	movs	r0, r2
 8002c60:	f7fd fa52 	bl	8000108 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	d90a      	bls.n	8002c84 <UART_SetConfig+0x2c8>
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	2380      	movs	r3, #128	@ 0x80
 8002c72:	025b      	lsls	r3, r3, #9
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d205      	bcs.n	8002c84 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	e003      	b.n	8002c8c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002c84:	231e      	movs	r3, #30
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002c98:	231e      	movs	r3, #30
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	781b      	ldrb	r3, [r3, #0]
}
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b008      	add	sp, #32
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	efff69f3 	.word	0xefff69f3
 8002cac:	ffffcfff 	.word	0xffffcfff
 8002cb0:	fffff4ff 	.word	0xfffff4ff
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40004400 	.word	0x40004400
 8002cc0:	40004800 	.word	0x40004800
 8002cc4:	40004c00 	.word	0x40004c00
 8002cc8:	007a1200 	.word	0x007a1200

08002ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	2208      	movs	r2, #8
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d00b      	beq.n	8002cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e10 <UART_AdvFeatureConfig+0x144>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d00b      	beq.n	8002d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4a43      	ldr	r2, [pc, #268]	@ (8002e14 <UART_AdvFeatureConfig+0x148>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d00b      	beq.n	8002d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a3b      	ldr	r2, [pc, #236]	@ (8002e18 <UART_AdvFeatureConfig+0x14c>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4013      	ands	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a34      	ldr	r2, [pc, #208]	@ (8002e1c <UART_AdvFeatureConfig+0x150>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	2210      	movs	r2, #16
 8002d62:	4013      	ands	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e20 <UART_AdvFeatureConfig+0x154>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	2220      	movs	r2, #32
 8002d84:	4013      	ands	r3, r2
 8002d86:	d00b      	beq.n	8002da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4a25      	ldr	r2, [pc, #148]	@ (8002e24 <UART_AdvFeatureConfig+0x158>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	2240      	movs	r2, #64	@ 0x40
 8002da6:	4013      	ands	r3, r2
 8002da8:	d01d      	beq.n	8002de6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e28 <UART_AdvFeatureConfig+0x15c>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	035b      	lsls	r3, r3, #13
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d10b      	bne.n	8002de6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4a15      	ldr	r2, [pc, #84]	@ (8002e2c <UART_AdvFeatureConfig+0x160>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	2280      	movs	r2, #128	@ 0x80
 8002dec:	4013      	ands	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4a0e      	ldr	r2, [pc, #56]	@ (8002e30 <UART_AdvFeatureConfig+0x164>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	605a      	str	r2, [r3, #4]
  }
}
 8002e08:	46c0      	nop			@ (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	ffff7fff 	.word	0xffff7fff
 8002e14:	fffdffff 	.word	0xfffdffff
 8002e18:	fffeffff 	.word	0xfffeffff
 8002e1c:	fffbffff 	.word	0xfffbffff
 8002e20:	ffffefff 	.word	0xffffefff
 8002e24:	ffffdfff 	.word	0xffffdfff
 8002e28:	ffefffff 	.word	0xffefffff
 8002e2c:	ff9fffff 	.word	0xff9fffff
 8002e30:	fff7ffff 	.word	0xfff7ffff

08002e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b092      	sub	sp, #72	@ 0x48
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2284      	movs	r2, #132	@ 0x84
 8002e40:	2100      	movs	r1, #0
 8002e42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e44:	f7fd fee4 	bl	8000c10 <HAL_GetTick>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2208      	movs	r2, #8
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d12c      	bne.n	8002eb4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e5c:	2280      	movs	r2, #128	@ 0x80
 8002e5e:	0391      	lsls	r1, r2, #14
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4a46      	ldr	r2, [pc, #280]	@ (8002f7c <UART_CheckIdleState+0x148>)
 8002e64:	9200      	str	r2, [sp, #0]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f000 f88c 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	d021      	beq.n	8002eb4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e70:	f3ef 8310 	mrs	r3, PRIMASK
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e80:	f383 8810 	msr	PRIMASK, r3
}
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2180      	movs	r1, #128	@ 0x80
 8002e92:	438a      	bics	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2278      	movs	r2, #120	@ 0x78
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e05f      	b.n	8002f74 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d146      	bne.n	8002f50 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec4:	2280      	movs	r2, #128	@ 0x80
 8002ec6:	03d1      	lsls	r1, r2, #15
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4a2c      	ldr	r2, [pc, #176]	@ (8002f7c <UART_CheckIdleState+0x148>)
 8002ecc:	9200      	str	r2, [sp, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f000 f858 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d03b      	beq.n	8002f50 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8002edc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ede:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4921      	ldr	r1, [pc, #132]	@ (8002f80 <UART_CheckIdleState+0x14c>)
 8002efa:	400a      	ands	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f10:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f12:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f14:	2301      	movs	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f383 8810 	msr	PRIMASK, r3
}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f383 8810 	msr	PRIMASK, r3
}
 8002f3a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2280      	movs	r2, #128	@ 0x80
 8002f40:	2120      	movs	r1, #32
 8002f42:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2278      	movs	r2, #120	@ 0x78
 8002f48:	2100      	movs	r1, #0
 8002f4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e011      	b.n	8002f74 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2280      	movs	r2, #128	@ 0x80
 8002f5a:	2120      	movs	r1, #32
 8002f5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2278      	movs	r2, #120	@ 0x78
 8002f6e:	2100      	movs	r1, #0
 8002f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b010      	add	sp, #64	@ 0x40
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	01ffffff 	.word	0x01ffffff
 8002f80:	fffffedf 	.word	0xfffffedf

08002f84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	1dfb      	adds	r3, r7, #7
 8002f92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f94:	e051      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	d04e      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9c:	f7fd fe38 	bl	8000c10 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d302      	bcc.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e051      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d03b      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b80      	cmp	r3, #128	@ 0x80
 8002fc6:	d038      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b40      	cmp	r3, #64	@ 0x40
 8002fcc:	d035      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d111      	bne.n	8003000 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 f83c 	bl	8003064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2284      	movs	r2, #132	@ 0x84
 8002ff0:	2108      	movs	r1, #8
 8002ff2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2278      	movs	r2, #120	@ 0x78
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e02c      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	401a      	ands	r2, r3
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	429a      	cmp	r2, r3
 8003012:	d112      	bne.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2280      	movs	r2, #128	@ 0x80
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0018      	movs	r0, r3
 8003022:	f000 f81f 	bl	8003064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2284      	movs	r2, #132	@ 0x84
 800302a:	2120      	movs	r1, #32
 800302c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2278      	movs	r2, #120	@ 0x78
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e00f      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	425a      	negs	r2, r3
 800304a:	4153      	adcs	r3, r2
 800304c:	b2db      	uxtb	r3, r3
 800304e:	001a      	movs	r2, r3
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d09e      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08e      	sub	sp, #56	@ 0x38
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800306c:	f3ef 8310 	mrs	r3, PRIMASK
 8003070:	617b      	str	r3, [r7, #20]
  return(result);
 8003072:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003074:	637b      	str	r3, [r7, #52]	@ 0x34
 8003076:	2301      	movs	r3, #1
 8003078:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f383 8810 	msr	PRIMASK, r3
}
 8003080:	46c0      	nop			@ (mov r8, r8)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4926      	ldr	r1, [pc, #152]	@ (8003128 <UART_EndRxTransfer+0xc4>)
 800308e:	400a      	ands	r2, r1
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003094:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f383 8810 	msr	PRIMASK, r3
}
 800309c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309e:	f3ef 8310 	mrs	r3, PRIMASK
 80030a2:	623b      	str	r3, [r7, #32]
  return(result);
 80030a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80030a8:	2301      	movs	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	f383 8810 	msr	PRIMASK, r3
}
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2101      	movs	r1, #1
 80030c0:	438a      	bics	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ca:	f383 8810 	msr	PRIMASK, r3
}
 80030ce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d118      	bne.n	800310a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d8:	f3ef 8310 	mrs	r3, PRIMASK
 80030dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80030de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030e2:	2301      	movs	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f383 8810 	msr	PRIMASK, r3
}
 80030ec:	46c0      	nop			@ (mov r8, r8)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2110      	movs	r1, #16
 80030fa:	438a      	bics	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f383 8810 	msr	PRIMASK, r3
}
 8003108:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2280      	movs	r2, #128	@ 0x80
 800310e:	2120      	movs	r1, #32
 8003110:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b00e      	add	sp, #56	@ 0x38
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	fffffedf 	.word	0xfffffedf

0800312c <memset>:
 800312c:	0003      	movs	r3, r0
 800312e:	1882      	adds	r2, r0, r2
 8003130:	4293      	cmp	r3, r2
 8003132:	d100      	bne.n	8003136 <memset+0xa>
 8003134:	4770      	bx	lr
 8003136:	7019      	strb	r1, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	e7f9      	b.n	8003130 <memset+0x4>

0800313c <__libc_init_array>:
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	2600      	movs	r6, #0
 8003140:	4c0c      	ldr	r4, [pc, #48]	@ (8003174 <__libc_init_array+0x38>)
 8003142:	4d0d      	ldr	r5, [pc, #52]	@ (8003178 <__libc_init_array+0x3c>)
 8003144:	1b64      	subs	r4, r4, r5
 8003146:	10a4      	asrs	r4, r4, #2
 8003148:	42a6      	cmp	r6, r4
 800314a:	d109      	bne.n	8003160 <__libc_init_array+0x24>
 800314c:	2600      	movs	r6, #0
 800314e:	f000 f819 	bl	8003184 <_init>
 8003152:	4c0a      	ldr	r4, [pc, #40]	@ (800317c <__libc_init_array+0x40>)
 8003154:	4d0a      	ldr	r5, [pc, #40]	@ (8003180 <__libc_init_array+0x44>)
 8003156:	1b64      	subs	r4, r4, r5
 8003158:	10a4      	asrs	r4, r4, #2
 800315a:	42a6      	cmp	r6, r4
 800315c:	d105      	bne.n	800316a <__libc_init_array+0x2e>
 800315e:	bd70      	pop	{r4, r5, r6, pc}
 8003160:	00b3      	lsls	r3, r6, #2
 8003162:	58eb      	ldr	r3, [r5, r3]
 8003164:	4798      	blx	r3
 8003166:	3601      	adds	r6, #1
 8003168:	e7ee      	b.n	8003148 <__libc_init_array+0xc>
 800316a:	00b3      	lsls	r3, r6, #2
 800316c:	58eb      	ldr	r3, [r5, r3]
 800316e:	4798      	blx	r3
 8003170:	3601      	adds	r6, #1
 8003172:	e7f2      	b.n	800315a <__libc_init_array+0x1e>
 8003174:	080031d4 	.word	0x080031d4
 8003178:	080031d4 	.word	0x080031d4
 800317c:	080031d8 	.word	0x080031d8
 8003180:	080031d4 	.word	0x080031d4

08003184 <_init>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr

08003190 <_fini>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr
